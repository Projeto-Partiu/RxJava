/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Aug 03 14:25:05 GMT 2017
 */

package io.reactivex.internal.operators.parallel;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class ParallelFromPublisher_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "io.reactivex.internal.operators.parallel.ParallelFromPublisher"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.timezone", "America/Fortaleza"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ParallelFromPublisher_ESTest_scaffolding.class.getClassLoader() ,
      "io.reactivex.functions.BiFunction",
      "io.reactivex.internal.operators.flowable.FlowableIgnoreElementsCompletable",
      "io.reactivex.internal.fuseable.ScalarCallable",
      "io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase",
      "io.reactivex.internal.operators.flowable.FlowableWindow",
      "io.reactivex.exceptions.UndeliverableException",
      "io.reactivex.internal.operators.single.SingleFromCallable",
      "io.reactivex.internal.operators.flowable.FlowableIntervalRange",
      "io.reactivex.internal.operators.single.SingleJust",
      "io.reactivex.FlowableTransformer",
      "io.reactivex.internal.util.ListAddBiConsumer",
      "io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter",
      "io.reactivex.internal.operators.parallel.ParallelConcatMap",
      "io.reactivex.functions.LongConsumer",
      "io.reactivex.Scheduler$Worker",
      "io.reactivex.internal.operators.flowable.FlowableDebounce",
      "io.reactivex.internal.operators.flowable.FlowableSubscribeOn",
      "io.reactivex.internal.schedulers.SchedulerWhen",
      "io.reactivex.internal.functions.Functions$ArrayListCapacityCallable",
      "io.reactivex.internal.operators.flowable.FlowableAmb",
      "io.reactivex.internal.operators.flowable.FlowableWithLatestFrom",
      "io.reactivex.internal.operators.flowable.FlowableBufferBoundary",
      "io.reactivex.internal.operators.parallel.ParallelFromPublisher",
      "io.reactivex.internal.operators.flowable.FlowableObserveOn",
      "io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest",
      "io.reactivex.internal.queue.SpscArrayQueue",
      "io.reactivex.internal.operators.parallel.ParallelDoOnNextTry",
      "io.reactivex.internal.operators.flowable.FlowableDebounceTimed",
      "io.reactivex.internal.operators.flowable.FlowableHide",
      "io.reactivex.FlowableSubscriber",
      "io.reactivex.internal.fuseable.HasUpstreamPublisher",
      "io.reactivex.internal.operators.completable.CompletableTimer",
      "io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream",
      "io.reactivex.internal.operators.flowable.FlowableConcatArray",
      "io.reactivex.internal.operators.flowable.FlowableRange",
      "io.reactivex.internal.operators.flowable.FlowableTakeWhile",
      "io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable",
      "io.reactivex.internal.functions.Functions$NaturalObjectComparator",
      "io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary",
      "io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle",
      "io.reactivex.internal.operators.flowable.FlowableTimeoutTimed",
      "io.reactivex.internal.operators.single.SingleFromUnsafeSource",
      "io.reactivex.parallel.ParallelFailureHandling",
      "io.reactivex.parallel.ParallelTransformer",
      "io.reactivex.internal.functions.Functions$EmptyLongConsumer",
      "io.reactivex.internal.operators.flowable.FlowableDetach",
      "io.reactivex.functions.BiConsumer",
      "io.reactivex.internal.operators.flowable.FlowableDematerialize",
      "io.reactivex.internal.operators.flowable.FlowableLift",
      "io.reactivex.Maybe",
      "io.reactivex.internal.operators.flowable.FlowableDistinct",
      "io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn",
      "io.reactivex.internal.subscriptions.SubscriptionHelper",
      "io.reactivex.internal.operators.flowable.FlowableAnySingle",
      "io.reactivex.internal.operators.flowable.FlowableJoin",
      "io.reactivex.Observable",
      "io.reactivex.internal.functions.ObjectHelper",
      "io.reactivex.exceptions.MissingBackpressureException",
      "io.reactivex.internal.operators.flowable.FlowableTakeLast",
      "io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector",
      "io.reactivex.internal.util.Pow2",
      "io.reactivex.internal.operators.single.SingleUsing",
      "io.reactivex.internal.operators.flowable.FlowableJust",
      "io.reactivex.internal.util.MergerBiFunction",
      "io.reactivex.internal.operators.flowable.FlowableFlattenIterable",
      "io.reactivex.functions.Predicate",
      "io.reactivex.internal.operators.observable.ObservableWindowTimed",
      "io.reactivex.internal.operators.flowable.FlowableSampleTimed",
      "io.reactivex.internal.operators.flowable.FlowableBufferTimed",
      "io.reactivex.SingleObserver",
      "io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport",
      "io.reactivex.internal.operators.single.SingleDelay",
      "io.reactivex.internal.operators.flowable.FlowableReduceWithSingle",
      "io.reactivex.internal.operators.flowable.FlowableRangeLong",
      "io.reactivex.internal.operators.flowable.FlowableRepeat",
      "io.reactivex.internal.operators.single.SingleDoOnSubscribe",
      "io.reactivex.MaybeObserver",
      "io.reactivex.SingleSource",
      "io.reactivex.internal.operators.parallel.ParallelFilter",
      "io.reactivex.internal.operators.flowable.FlowableSingleSingle",
      "io.reactivex.internal.operators.flowable.FlowableGenerate",
      "io.reactivex.internal.operators.flowable.FlowableDoAfterNext",
      "io.reactivex.internal.operators.flowable.FlowableBuffer",
      "io.reactivex.internal.operators.single.SingleTimer",
      "io.reactivex.internal.operators.flowable.FlowableCollectSingle",
      "io.reactivex.internal.schedulers.NewThreadScheduler",
      "io.reactivex.internal.operators.flowable.FlowableOnErrorNext",
      "io.reactivex.internal.operators.flowable.FlowableZipIterable",
      "io.reactivex.internal.operators.flowable.FlowableCreate$DropAsyncEmitter",
      "io.reactivex.internal.operators.flowable.FlowableConcatMapEager",
      "io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter",
      "io.reactivex.internal.operators.parallel.ParallelFromArray",
      "io.reactivex.internal.operators.maybe.MaybePeek",
      "io.reactivex.internal.operators.flowable.FlowableReduceMaybe",
      "io.reactivex.internal.operators.flowable.FlowableRepeatWhen",
      "io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter",
      "io.reactivex.internal.fuseable.HasUpstreamObservableSource",
      "io.reactivex.internal.operators.flowable.FlowableFromFuture",
      "io.reactivex.plugins.RxJavaPlugins",
      "io.reactivex.internal.operators.flowable.FlowableScanSeed",
      "io.reactivex.internal.operators.single.SingleFromPublisher",
      "io.reactivex.internal.fuseable.HasUpstreamMaybeSource",
      "io.reactivex.internal.operators.flowable.FlowableSkipWhile",
      "io.reactivex.disposables.Disposable",
      "io.reactivex.internal.operators.maybe.MaybeDelay",
      "io.reactivex.internal.subscriptions.EmptySubscription",
      "io.reactivex.internal.functions.Functions$EmptyAction",
      "io.reactivex.internal.operators.flowable.FlowableAllSingle",
      "io.reactivex.internal.schedulers.SingleScheduler",
      "io.reactivex.internal.operators.flowable.FlowableDefer",
      "io.reactivex.internal.operators.flowable.FlowableFromCallable",
      "io.reactivex.internal.subscriptions.SubscriptionArbiter",
      "io.reactivex.flowables.ConnectableFlowable",
      "io.reactivex.observers.BaseTestConsumer",
      "io.reactivex.Single",
      "io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged",
      "io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop",
      "io.reactivex.ObservableSource",
      "org.reactivestreams.Subscriber",
      "io.reactivex.internal.functions.Functions$Identity",
      "io.reactivex.internal.operators.flowable.FlowableFlatMapSingle",
      "io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionDelayError",
      "io.reactivex.internal.operators.parallel.ParallelCollect",
      "io.reactivex.internal.operators.single.SingleAmb",
      "io.reactivex.internal.operators.flowable.FlowableConcatMapEagerPublisher",
      "io.reactivex.internal.operators.flowable.FlowableRetryPredicate",
      "io.reactivex.internal.operators.flowable.FlowableSamplePublisher",
      "io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty",
      "io.reactivex.internal.operators.flowable.FlowableFlatMap",
      "io.reactivex.internal.operators.flowable.FlowableDoOnEach",
      "io.reactivex.internal.operators.flowable.FlowableDoOnLifecycle",
      "io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer",
      "io.reactivex.functions.Consumer",
      "io.reactivex.internal.operators.flowable.FlowableTakeLastOne",
      "io.reactivex.annotations.BackpressureKind",
      "io.reactivex.internal.operators.flowable.FlowableGroupBy",
      "io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate",
      "io.reactivex.functions.Function",
      "io.reactivex.internal.operators.flowable.FlowableCreate",
      "org.reactivestreams.Subscription",
      "io.reactivex.internal.operators.parallel.ParallelReduce",
      "io.reactivex.internal.operators.flowable.FlowableSkip",
      "io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany",
      "io.reactivex.Completable",
      "io.reactivex.internal.operators.parallel.ParallelSortedJoin",
      "io.reactivex.internal.util.ExceptionHelper",
      "io.reactivex.internal.operators.observable.ObservableFromPublisher",
      "io.reactivex.internal.operators.flowable.FlowableSkipUntil",
      "io.reactivex.internal.operators.flowable.FlowableElementAtMaybe",
      "io.reactivex.internal.operators.flowable.FlowableCache",
      "io.reactivex.FlowableEmitter",
      "io.reactivex.internal.operators.flowable.FlowableDoFinally",
      "io.reactivex.CompletableObserver",
      "io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$RailSubscription",
      "io.reactivex.internal.functions.Functions",
      "io.reactivex.internal.functions.Functions$TruePredicate",
      "io.reactivex.internal.operators.flowable.FlowableOnErrorReturn",
      "io.reactivex.internal.operators.flowable.FlowableTimeout",
      "io.reactivex.internal.operators.flowable.FlowableDelay",
      "io.reactivex.CompletableSource",
      "io.reactivex.internal.operators.parallel.ParallelJoin",
      "io.reactivex.internal.functions.Functions$EmptyConsumer",
      "io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther",
      "io.reactivex.MaybeSource",
      "io.reactivex.internal.schedulers.IoScheduler",
      "io.reactivex.internal.schedulers.ComputationScheduler",
      "io.reactivex.internal.operators.flowable.FlowableUsing",
      "io.reactivex.internal.operators.flowable.FlowableFromIterable",
      "io.reactivex.internal.operators.flowable.FlowableZip",
      "io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed",
      "io.reactivex.internal.functions.Functions$EmptyRunnable",
      "io.reactivex.internal.operators.flowable.FlowableMaterialize",
      "io.reactivex.internal.operators.observable.AbstractObservableWithUpstream",
      "io.reactivex.internal.operators.flowable.FlowableTimeInterval",
      "io.reactivex.Flowable",
      "io.reactivex.internal.operators.parallel.ParallelMapTry",
      "io.reactivex.BackpressureStrategy",
      "io.reactivex.internal.operators.parallel.ParallelRunOn",
      "io.reactivex.internal.fuseable.QueueFuseable",
      "org.reactivestreams.Publisher",
      "io.reactivex.internal.operators.flowable.FlowableCreate$ErrorAsyncEmitter",
      "io.reactivex.BackpressureOverflowStrategy",
      "io.reactivex.internal.operators.flowable.FlowableWindowBoundary",
      "io.reactivex.internal.operators.flowable.FlowableIgnoreElements",
      "io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate",
      "io.reactivex.FlowableOnSubscribe",
      "io.reactivex.internal.fuseable.QueueSubscription",
      "io.reactivex.internal.fuseable.FuseToFlowable",
      "io.reactivex.internal.functions.Functions$OnErrorMissingConsumer",
      "io.reactivex.internal.operators.parallel.ParallelPeek",
      "io.reactivex.internal.fuseable.SimpleQueue",
      "io.reactivex.internal.operators.flowable.FlowablePublishMulticast",
      "io.reactivex.Observer",
      "io.reactivex.internal.functions.Functions$NullCallable",
      "io.reactivex.internal.operators.flowable.FlowableRepeatUntil",
      "io.reactivex.internal.operators.flowable.FlowableSerialized",
      "io.reactivex.internal.operators.flowable.FlowableSingleMaybe",
      "io.reactivex.functions.BiPredicate",
      "io.reactivex.internal.operators.flowable.FlowableMap",
      "io.reactivex.internal.operators.flowable.FlowableFilter",
      "io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle",
      "io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher",
      "io.reactivex.internal.operators.single.SingleDefer",
      "io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter",
      "io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher",
      "io.reactivex.parallel.ParallelFlowable",
      "io.reactivex.internal.operators.flowable.FlowableTakeUntil",
      "io.reactivex.internal.operators.flowable.FlowableLastSingle",
      "io.reactivex.internal.operators.flowable.FlowableLastMaybe",
      "io.reactivex.internal.operators.flowable.FlowableRepeatWhen$RepeatWhenSubscriber",
      "io.reactivex.internal.fuseable.SimplePlainQueue",
      "io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe",
      "io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter",
      "io.reactivex.FlowableOperator",
      "io.reactivex.internal.util.SorterFunction",
      "io.reactivex.internal.operators.flowable.FlowableFromPublisher",
      "io.reactivex.internal.operators.flowable.FlowableElementAtSingle",
      "io.reactivex.internal.operators.single.SingleDoOnError",
      "io.reactivex.internal.operators.parallel.ParallelMap",
      "io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber",
      "io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier",
      "io.reactivex.internal.util.ExceptionHelper$Termination",
      "io.reactivex.internal.operators.parallel.ParallelReduceFull",
      "io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber",
      "io.reactivex.internal.operators.flowable.FlowableSwitchMap",
      "io.reactivex.exceptions.CompositeException",
      "io.reactivex.internal.operators.flowable.FlowableCountSingle",
      "io.reactivex.internal.operators.flowable.FlowableCombineLatest",
      "io.reactivex.internal.operators.flowable.FlowableToListSingle",
      "io.reactivex.internal.operators.flowable.FlowableFromArray",
      "io.reactivex.internal.operators.flowable.FlowableSkipLast",
      "io.reactivex.internal.operators.flowable.FlowableSkipLastTimed",
      "io.reactivex.functions.BooleanSupplier",
      "io.reactivex.internal.operators.flowable.FlowableTimer",
      "io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription",
      "io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy",
      "io.reactivex.internal.operators.maybe.MaybeTimer",
      "io.reactivex.Scheduler",
      "io.reactivex.internal.functions.Functions$MaxRequestSubscription",
      "io.reactivex.internal.operators.flowable.FlowableGroupJoin",
      "io.reactivex.internal.functions.Functions$FalsePredicate",
      "io.reactivex.subscribers.TestSubscriber",
      "io.reactivex.internal.operators.flowable.FlowableError",
      "io.reactivex.internal.operators.flowable.FlowableConcatMap",
      "io.reactivex.observables.ConnectableObservable",
      "io.reactivex.internal.util.BackpressureHelper",
      "io.reactivex.internal.functions.ObjectHelper$BiObjectPredicate",
      "io.reactivex.internal.functions.Functions$ErrorConsumer",
      "io.reactivex.internal.operators.parallel.ParallelFlatMap",
      "io.reactivex.functions.Action",
      "io.reactivex.exceptions.ProtocolViolationException",
      "io.reactivex.functions.Function3",
      "io.reactivex.internal.operators.flowable.FlowableRetryWhen",
      "io.reactivex.functions.Function5",
      "io.reactivex.functions.Function4",
      "io.reactivex.functions.Function7",
      "io.reactivex.exceptions.OnErrorNotImplementedException",
      "io.reactivex.functions.Function6",
      "io.reactivex.functions.Function9",
      "io.reactivex.functions.Function8",
      "io.reactivex.internal.operators.flowable.FlowableTakeLastTimed",
      "io.reactivex.internal.operators.flowable.FlowableTake",
      "io.reactivex.Emitter",
      "io.reactivex.internal.operators.completable.CompletableDelay",
      "io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier",
      "io.reactivex.internal.operators.flowable.FlowableWindowTimed",
      "io.reactivex.internal.operators.flowable.FlowableScan",
      "io.reactivex.internal.operators.parallel.ParallelFilterTry",
      "io.reactivex.internal.operators.flowable.FlowableInterval",
      "io.reactivex.internal.operators.maybe.AbstractMaybeWithUpstream"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("io.reactivex.functions.Action", false, ParallelFromPublisher_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.util.Comparator", false, ParallelFromPublisher_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ParallelFromPublisher_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher",
      "io.reactivex.annotations.BackpressureKind",
      "io.reactivex.internal.subscriptions.SubscriptionHelper",
      "io.reactivex.plugins.RxJavaPlugins",
      "io.reactivex.internal.queue.SpscArrayQueue",
      "io.reactivex.exceptions.ProtocolViolationException",
      "io.reactivex.Flowable",
      "io.reactivex.internal.functions.ObjectHelper",
      "io.reactivex.internal.subscriptions.EmptySubscription",
      "io.reactivex.internal.functions.Functions",
      "io.reactivex.internal.util.ListAddBiConsumer",
      "io.reactivex.internal.util.ExceptionHelper$Termination",
      "io.reactivex.internal.util.ExceptionHelper",
      "io.reactivex.Scheduler"
    );
  }
}
