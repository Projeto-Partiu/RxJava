/**
 * Copyright (c) 2016-present, RxJava Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 03 13:03:01 GMT 2017
 */

package io.reactivex.internal.queue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import java.util.concurrent.atomic.AtomicReferenceArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SpscLinkedArrayQueue_ESTest extends SpscLinkedArrayQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpscLinkedArrayQueue<String> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<String>((-4844));
      spscLinkedArrayQueue0.consumerBuffer = null;
      spscLinkedArrayQueue0.offer("Urlo", "Urlo");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpscLinkedArrayQueue<Integer> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Integer>((-1));
      spscLinkedArrayQueue0.producerLookAhead = (long) 0;
      Integer integer0 = new Integer(0);
      SpscLinkedArrayQueue<String> spscLinkedArrayQueue1 = new SpscLinkedArrayQueue<String>(0);
      AtomicReferenceArray<Object> atomicReferenceArray0 = spscLinkedArrayQueue1.producerBuffer;
      spscLinkedArrayQueue0.producerBuffer = atomicReferenceArray0;
      spscLinkedArrayQueue0.offer(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpscLinkedArrayQueue<Integer> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Integer>(361);
      Integer integer0 = spscLinkedArrayQueue0.peek();
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue1 = new SpscLinkedArrayQueue<Object>(4);
      Object object0 = new Object();
      spscLinkedArrayQueue1.offer((Object) integer0, object0);
      spscLinkedArrayQueue1.size();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Object>(1);
      Object object0 = new Object();
      spscLinkedArrayQueue0.offer(object0, object0);
      spscLinkedArrayQueue0.peek();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpscLinkedArrayQueue<String> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<String>((-4844));
      spscLinkedArrayQueue0.consumerBuffer = null;
      // Undeclared exception!
      try { 
        spscLinkedArrayQueue0.poll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Object>(0);
      AtomicReferenceArray<Object> atomicReferenceArray0 = new AtomicReferenceArray<Object>(0);
      spscLinkedArrayQueue0.consumerBuffer = atomicReferenceArray0;
      // Undeclared exception!
      try { 
        spscLinkedArrayQueue0.poll();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0
         //
         verifyException("java.util.concurrent.atomic.AtomicReferenceArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpscLinkedArrayQueue<String> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<String>(0);
      spscLinkedArrayQueue0.consumerBuffer = null;
      // Undeclared exception!
      try { 
        spscLinkedArrayQueue0.peek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpscLinkedArrayQueue<Integer> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Integer>(0);
      AtomicReferenceArray<Object> atomicReferenceArray0 = new AtomicReferenceArray<Object>(0);
      spscLinkedArrayQueue0.consumerBuffer = atomicReferenceArray0;
      // Undeclared exception!
      try { 
        spscLinkedArrayQueue0.peek();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0
         //
         verifyException("java.util.concurrent.atomic.AtomicReferenceArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Object>((-2971));
      spscLinkedArrayQueue0.producerBuffer = null;
      // Undeclared exception!
      try { 
        spscLinkedArrayQueue0.offer((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpscLinkedArrayQueue<String> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<String>(1258);
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue1 = new SpscLinkedArrayQueue<Object>(1258);
      Object[] objectArray0 = new Object[2];
      AtomicReferenceArray<Object> atomicReferenceArray0 = new AtomicReferenceArray<Object>(objectArray0);
      spscLinkedArrayQueue1.producerBuffer = atomicReferenceArray0;
      // Undeclared exception!
      try { 
        spscLinkedArrayQueue1.offer((Object) spscLinkedArrayQueue0, objectArray0[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 2
         //
         verifyException("java.util.concurrent.atomic.AtomicReferenceArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpscLinkedArrayQueue<String> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<String>(1);
      spscLinkedArrayQueue0.producerBuffer = null;
      // Undeclared exception!
      try { 
        spscLinkedArrayQueue0.offer("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.reactivex.internal.queue.SpscLinkedArrayQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Object>(1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      AtomicReferenceArray<Object> atomicReferenceArray0 = new AtomicReferenceArray<Object>(objectArray0);
      spscLinkedArrayQueue0.producerBuffer = atomicReferenceArray0;
      // Undeclared exception!
      try { 
        spscLinkedArrayQueue0.offer(object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0
         //
         verifyException("java.util.concurrent.atomic.AtomicReferenceArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpscLinkedArrayQueue<Integer> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Integer>(361);
      spscLinkedArrayQueue0.consumerBuffer = null;
      // Undeclared exception!
      try { 
        spscLinkedArrayQueue0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Object>((-471));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) spscLinkedArrayQueue0;
      AtomicReferenceArray<Object> atomicReferenceArray0 = new AtomicReferenceArray<Object>(objectArray0);
      spscLinkedArrayQueue0.consumerBuffer = atomicReferenceArray0;
      // Undeclared exception!
      try { 
        spscLinkedArrayQueue0.clear();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1
         //
         verifyException("java.util.concurrent.atomic.AtomicReferenceArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue0 = null;
      try {
        spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Object>(2146472115);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.atomic.AtomicReferenceArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Object>(0);
      spscLinkedArrayQueue0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SpscLinkedArrayQueue<Integer> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Integer>(0);
      spscLinkedArrayQueue0.poll();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SpscLinkedArrayQueue<String> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<String>(0);
      spscLinkedArrayQueue0.offer((String) null, "`Z]ybDnPI");
      spscLinkedArrayQueue0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpscLinkedArrayQueue<String> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<String>(1);
      spscLinkedArrayQueue0.size();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Object>(1);
      Object object0 = new Object();
      spscLinkedArrayQueue0.offer(object0, object0);
      spscLinkedArrayQueue0.clear();
      assertTrue(spscLinkedArrayQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SpscLinkedArrayQueue<String> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<String>((-1));
      spscLinkedArrayQueue0.producerLookAheadStep = (-1);
      spscLinkedArrayQueue0.producerLookAhead = (long) (-1);
      spscLinkedArrayQueue0.offer("\t^}3qf.mdnj#Y.g");
      boolean boolean0 = spscLinkedArrayQueue0.offer("\t^}3qf.mdnj#Y.g");
      assertEquals(2, spscLinkedArrayQueue0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Object>(0);
      // Undeclared exception!
      try { 
        spscLinkedArrayQueue0.offer((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null is not a valid element
         //
         verifyException("io.reactivex.internal.queue.SpscLinkedArrayQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SpscLinkedArrayQueue<String> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<String>((-1427));
      SpscLinkedArrayQueue<Integer> spscLinkedArrayQueue1 = new SpscLinkedArrayQueue<Integer>(0);
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) spscLinkedArrayQueue1;
      AtomicReferenceArray<Object> atomicReferenceArray0 = new AtomicReferenceArray<Object>(objectArray0);
      spscLinkedArrayQueue0.producerBuffer = atomicReferenceArray0;
      spscLinkedArrayQueue0.offer((String) null, (String) null);
      assertEquals(2, spscLinkedArrayQueue0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpscLinkedArrayQueue<Object> spscLinkedArrayQueue0 = new SpscLinkedArrayQueue<Object>(1);
      Object object0 = new Object();
      spscLinkedArrayQueue0.offer(object0, object0);
      spscLinkedArrayQueue0.poll();
      int int0 = spscLinkedArrayQueue0.size();
      assertEquals(1, int0);
  }
}
