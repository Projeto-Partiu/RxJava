/**
 * Copyright (c) 2016-present, RxJava Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 03 14:10:09 GMT 2017
 */

package io.reactivex.internal.schedulers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.reactivex.Scheduler;
import io.reactivex.internal.schedulers.IoScheduler;
import io.reactivex.internal.schedulers.RxThreadFactory;
import io.reactivex.internal.schedulers.ScheduledRunnable;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IoScheduler_ESTest extends IoScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = IoScheduler.NONE;
      IoScheduler.ThreadWorker ioScheduler_ThreadWorker0 = ioScheduler_CachedWorkerPool0.get();
      ioScheduler_CachedWorkerPool0.release(ioScheduler_ThreadWorker0);
      ioScheduler_ThreadWorker0.setExpirationTime(0L);
      ioScheduler_CachedWorkerPool0.evictExpiredWorkers();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("5");
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = new IoScheduler.CachedWorkerPool(60L, timeUnit0, rxThreadFactory0);
      IoScheduler.ThreadWorker ioScheduler_ThreadWorker0 = ioScheduler_CachedWorkerPool0.get();
      long long0 = ioScheduler_ThreadWorker0.getExpirationTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("", 118, true);
      IoScheduler.ThreadWorker ioScheduler_ThreadWorker0 = new IoScheduler.ThreadWorker(rxThreadFactory0);
      assertEquals(0L, ioScheduler_ThreadWorker0.getExpirationTime());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = new IoScheduler.CachedWorkerPool(2L, (TimeUnit) null, (ThreadFactory) null);
      long long0 = ioScheduler_CachedWorkerPool0.now();
      assertEquals(1392409281320000L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IoScheduler ioScheduler0 = new IoScheduler();
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ioScheduler0.schedulePeriodicallyDirect(thread0, 0L, 0L, timeUnit0);
      int int0 = ioScheduler0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IoScheduler ioScheduler0 = new IoScheduler((ThreadFactory) null);
      // Undeclared exception!
      try { 
        ioScheduler0.createWorker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = IoScheduler.NONE;
      IoScheduler.EventLoopWorker ioScheduler_EventLoopWorker0 = new IoScheduler.EventLoopWorker(ioScheduler_CachedWorkerPool0);
      ioScheduler_EventLoopWorker0.dispose();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ioScheduler_EventLoopWorker0.schedule((Runnable) ioScheduler_CachedWorkerPool0, 0L, timeUnit0);
      assertTrue(ioScheduler_EventLoopWorker0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      RxThreadFactory rxThreadFactory0 = IoScheduler.EVICTOR_THREAD_FACTORY;
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = new IoScheduler.CachedWorkerPool(544L, timeUnit0, rxThreadFactory0);
      IoScheduler.EventLoopWorker ioScheduler_EventLoopWorker0 = new IoScheduler.EventLoopWorker(ioScheduler_CachedWorkerPool0);
      ioScheduler_EventLoopWorker0.dispose();
      ioScheduler_EventLoopWorker0.dispose();
      assertTrue(ioScheduler_EventLoopWorker0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("A *[(JFiszZxn7W", 61, true);
      IoScheduler ioScheduler0 = new IoScheduler(rxThreadFactory0);
      ioScheduler0.shutdown();
      ioScheduler0.shutdown();
      assertEquals(900000000000L, ioScheduler0.clockDriftTolerance());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IoScheduler ioScheduler0 = new IoScheduler();
      ioScheduler0.shutdown();
      ioScheduler0.start();
      assertEquals(900000000000L, ioScheduler0.clockDriftTolerance());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IoScheduler ioScheduler0 = new IoScheduler();
      ioScheduler0.start();
      assertEquals(900000000000L, ioScheduler0.clockDriftTolerance());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = IoScheduler.NONE;
      ioScheduler_CachedWorkerPool0.shutdown();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      RxThreadFactory rxThreadFactory0 = IoScheduler.EVICTOR_THREAD_FACTORY;
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = new IoScheduler.CachedWorkerPool(544L, timeUnit0, rxThreadFactory0);
      IoScheduler.EventLoopWorker ioScheduler_EventLoopWorker0 = new IoScheduler.EventLoopWorker(ioScheduler_CachedWorkerPool0);
      ioScheduler_EventLoopWorker0.dispose();
      ioScheduler_CachedWorkerPool0.evictExpiredWorkers();
      //  // Unstable assertion: assertEquals(20.0, rxThreadFactory0.doubleValue(), 0.01);
      //  // Unstable assertion: assertEquals(20L, rxThreadFactory0.get());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("5");
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = new IoScheduler.CachedWorkerPool(60L, timeUnit0, rxThreadFactory0);
      IoScheduler.ThreadWorker ioScheduler_ThreadWorker0 = ioScheduler_CachedWorkerPool0.get();
      ioScheduler_CachedWorkerPool0.release(ioScheduler_ThreadWorker0);
      IoScheduler.EventLoopWorker ioScheduler_EventLoopWorker0 = new IoScheduler.EventLoopWorker(ioScheduler_CachedWorkerPool0);
      assertFalse(ioScheduler_EventLoopWorker0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IoScheduler ioScheduler0 = new IoScheduler();
      int int0 = ioScheduler0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = new IoScheduler.CachedWorkerPool(2L, (TimeUnit) null, (ThreadFactory) null);
      ioScheduler_CachedWorkerPool0.run();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = new IoScheduler.CachedWorkerPool(2L, (TimeUnit) null, (ThreadFactory) null);
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool1 = IoScheduler.NONE;
      IoScheduler.ThreadWorker ioScheduler_ThreadWorker0 = ioScheduler_CachedWorkerPool1.get();
      ioScheduler_CachedWorkerPool0.release(ioScheduler_ThreadWorker0);
      ioScheduler_CachedWorkerPool0.evictExpiredWorkers();
      assertNotSame(ioScheduler_CachedWorkerPool0, ioScheduler_CachedWorkerPool1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("5");
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = new IoScheduler.CachedWorkerPool(60L, timeUnit0, rxThreadFactory0);
      IoScheduler.EventLoopWorker ioScheduler_EventLoopWorker0 = new IoScheduler.EventLoopWorker(ioScheduler_CachedWorkerPool0);
      boolean boolean0 = ioScheduler_EventLoopWorker0.isDisposed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IoScheduler ioScheduler0 = new IoScheduler();
      Scheduler.Worker scheduler_Worker0 = ioScheduler0.createWorker();
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = IoScheduler.NONE;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledRunnable scheduledRunnable0 = (ScheduledRunnable)scheduler_Worker0.schedule((Runnable) ioScheduler_CachedWorkerPool0, 0L, timeUnit0);
      assertEquals(3, scheduledRunnable0.length());
  }
}
