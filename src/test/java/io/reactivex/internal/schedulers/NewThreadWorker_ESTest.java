/**
 * Copyright (c) 2016-present, RxJava Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 03 13:28:07 GMT 2017
 */

package io.reactivex.internal.schedulers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableContainer;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.disposables.ListCompositeDisposable;
import io.reactivex.internal.schedulers.NewThreadWorker;
import io.reactivex.internal.schedulers.RxThreadFactory;
import io.reactivex.internal.schedulers.ScheduledRunnable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.ArrayDeque;
import java.util.Vector;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NewThreadWorker_ESTest extends NewThreadWorker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("Z");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      Function<Runnable, Runnable> function0 = (Function<Runnable, Runnable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.lang.Runnable.class));
      RxJavaPlugins.setScheduleHandler(function0);
      ThreadGroup threadGroup0 = new ThreadGroup("");
      MockThread mockThread0 = new MockThread(threadGroup0, "Z");
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Vector<DisposableHelper> vector0 = new Vector<DisposableHelper>(0);
      CompositeDisposable compositeDisposable0 = new CompositeDisposable(vector0);
      newThreadWorker0.scheduleActual(mockThread0, (-126L), timeUnit0, compositeDisposable0);
      assertEquals(1L, rxThreadFactory0.get());
      assertEquals(1L, rxThreadFactory0.longValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      MockThread mockThread0 = new MockThread("");
      Function<Object, Runnable> function0 = (Function<Object, Runnable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      RxJavaPlugins.setScheduleHandler(function0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Disposable disposable0 = newThreadWorker0.schedulePeriodicallyDirect(mockThread0, (-1052L), 2044L, timeUnit0);
      assertNotNull(disposable0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      MockThread mockThread0 = new MockThread("");
      Function<Object, Runnable> function0 = (Function<Object, Runnable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      RxJavaPlugins.setScheduleHandler(function0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Disposable disposable0 = newThreadWorker0.schedulePeriodicallyDirect(mockThread0, (-1052L), (-1052L), timeUnit0);
      assertFalse(disposable0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("%H)27y?Umcw-E%tU8t4", 1);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      newThreadWorker0.shutdown();
      boolean boolean0 = newThreadWorker0.isDisposed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("62UqcL");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      Thread thread0 = MockThread.currentThread();
      newThreadWorker0.shutdown();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        newThreadWorker0.schedulePeriodicallyDirect(thread0, (-1284L), 1908L, timeUnit0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("", 0);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        newThreadWorker0.schedulePeriodicallyDirect(mockThread0, 0, 0, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      newThreadWorker0.dispose();
      // Undeclared exception!
      try { 
        newThreadWorker0.scheduleDirect(mockThread0, (-2920L), timeUnit0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory((String) null);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        newThreadWorker0.scheduleDirect(thread0, 2896L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("UZUcZ$", 2694, true);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        newThreadWorker0.scheduleDirect(thread0, 0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory((String) null, (-2774), false);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      MockThread mockThread0 = new MockThread((Runnable) null, "<5");
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ArrayDeque<EmptyDisposable> arrayDeque0 = new ArrayDeque<EmptyDisposable>();
      CompositeDisposable compositeDisposable0 = new CompositeDisposable(arrayDeque0);
      // Undeclared exception!
      try { 
        newThreadWorker0.scheduleActual(mockThread0, 303L, timeUnit0, compositeDisposable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("#Jm^", (-151));
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      MockThread mockThread0 = new MockThread("#Jm^");
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ListCompositeDisposable listCompositeDisposable0 = new ListCompositeDisposable();
      // Undeclared exception!
      try { 
        newThreadWorker0.scheduleActual(mockThread0, (-151), timeUnit0, listCompositeDisposable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      newThreadWorker0.shutdown();
      MockThread mockThread0 = new MockThread((Runnable) null);
      newThreadWorker0.disposed = false;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        newThreadWorker0.schedule((Runnable) mockThread0, 2239L, timeUnit0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory((String) null, 1);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        newThreadWorker0.schedule((Runnable) null, (long) 1, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("F", 1141);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        newThreadWorker0.schedule((Runnable) mockThread0, (long) 1141, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("%H)27yUmcw-E%)tUet4");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ListCompositeDisposable listCompositeDisposable0 = new ListCompositeDisposable();
      ScheduledRunnable scheduledRunnable0 = newThreadWorker0.scheduleActual(thread0, 1, timeUnit0, listCompositeDisposable0);
      newThreadWorker0.shutdown();
      newThreadWorker0.disposed = false;
      // Undeclared exception!
      try { 
        newThreadWorker0.schedule((Runnable) scheduledRunnable0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory((String) null);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      ThreadGroup threadGroup0 = new ThreadGroup("");
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "*^hs}j){*_{s\"I", 1928L);
      // Undeclared exception!
      try { 
        newThreadWorker0.schedule((Runnable) mockThread0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("", 2836);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      // Undeclared exception!
      try { 
        newThreadWorker0.schedule((Runnable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NewThreadWorker newThreadWorker0 = null;
      try {
        newThreadWorker0 = new NewThreadWorker((ThreadFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      newThreadWorker0.schedule((Runnable) mockThread0, (-2920L), timeUnit0);
      assertEquals(1.0, rxThreadFactory0.doubleValue(), 0.01);
      assertEquals((byte)1, rxThreadFactory0.byteValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("62UqcL");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      newThreadWorker0.shutdown();
      newThreadWorker0.shutdown();
      assertTrue(newThreadWorker0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("%H)27yUmcw-E%)tUet4");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      newThreadWorker0.shutdown();
      newThreadWorker0.dispose();
      assertTrue(newThreadWorker0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("%H)27y?Umcw-E%tU8t4", 1);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ListCompositeDisposable listCompositeDisposable0 = new ListCompositeDisposable();
      ScheduledRunnable scheduledRunnable0 = newThreadWorker0.scheduleActual(thread0, 1, timeUnit0, listCompositeDisposable0);
      newThreadWorker0.shutdown();
      // Undeclared exception!
      try { 
        newThreadWorker0.scheduleActual(scheduledRunnable0, 1, timeUnit0, listCompositeDisposable0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ScheduledRunnable scheduledRunnable0 = newThreadWorker0.scheduleActual(mockThread0, (-2920L), timeUnit0, (DisposableContainer) null);
      assertEquals(3, scheduledRunnable0.length());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ListCompositeDisposable listCompositeDisposable0 = new ListCompositeDisposable();
      listCompositeDisposable0.dispose();
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("D", 6, false);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      newThreadWorker0.scheduleActual(thread0, 6, timeUnit0, listCompositeDisposable0);
      assertEquals(0L, rxThreadFactory0.longValue());
      assertEquals((byte)0, rxThreadFactory0.byteValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory((String) null);
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        newThreadWorker0.schedulePeriodicallyDirect((Runnable) null, 1L, (-773L), timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Disposable disposable0 = newThreadWorker0.scheduleDirect(mockThread0, (-2920L), timeUnit0);
      assertNotNull(disposable0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      MockThread mockThread0 = new MockThread("");
      newThreadWorker0.disposed = true;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      newThreadWorker0.schedule((Runnable) mockThread0, 2044L, timeUnit0);
      assertEquals(0.0F, rxThreadFactory0.floatValue(), 0.01F);
      assertEquals(0.0, rxThreadFactory0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("%H)27yUmcw-E%)tUet4");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ListCompositeDisposable listCompositeDisposable0 = new ListCompositeDisposable();
      ScheduledRunnable scheduledRunnable0 = newThreadWorker0.scheduleActual(thread0, 1, timeUnit0, listCompositeDisposable0);
      Disposable disposable0 = newThreadWorker0.schedule((Runnable) scheduledRunnable0);
      assertNotSame(disposable0, scheduledRunnable0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("%H)27yUmcw-E%)tUet4");
      NewThreadWorker newThreadWorker0 = new NewThreadWorker(rxThreadFactory0);
      boolean boolean0 = newThreadWorker0.isDisposed();
      assertFalse(boolean0);
  }
}
