/**
 * Copyright (c) 2016-present, RxJava Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 03 13:45:51 GMT 2017
 */

package io.reactivex.internal.schedulers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.ListCompositeDisposable;
import io.reactivex.internal.schedulers.AbstractDirectTask;
import io.reactivex.internal.schedulers.ComputationScheduler;
import io.reactivex.internal.schedulers.ExecutorScheduler;
import io.reactivex.internal.schedulers.InstantPeriodicTask;
import io.reactivex.internal.schedulers.IoScheduler;
import io.reactivex.internal.schedulers.RxThreadFactory;
import io.reactivex.internal.schedulers.ScheduledRunnable;
import java.util.ArrayDeque;
import java.util.concurrent.Executor;
import java.util.concurrent.FutureTask;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComputationScheduler_ESTest extends ComputationScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("~sR\"|$mSBiC9-RF@");
      ComputationScheduler.FixedSchedulerPool computationScheduler_FixedSchedulerPool0 = new ComputationScheduler.FixedSchedulerPool(0, rxThreadFactory0);
      ComputationScheduler.PoolWorker computationScheduler_PoolWorker0 = computationScheduler_FixedSchedulerPool0.getEventLoop();
      assertTrue(computationScheduler_PoolWorker0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = ComputationScheduler.cap(32, (-2201));
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("");
      ComputationScheduler computationScheduler0 = new ComputationScheduler(rxThreadFactory0);
      computationScheduler0.shutdown();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = new IoScheduler.CachedWorkerPool(3027L, timeUnit0, rxThreadFactory0);
      // Undeclared exception!
      try { 
        computationScheduler0.schedulePeriodicallyDirect(ioScheduler_CachedWorkerPool0, 262L,
                262L, timeUnit0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory((String) null, 0, false);
      ComputationScheduler computationScheduler0 = new ComputationScheduler(rxThreadFactory0);
      FutureTask<Void> futureTask0 = AbstractDirectTask.DISPOSED;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        computationScheduler0.schedulePeriodicallyDirect(futureTask0, 0, 1724L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("B6TT*z", 1296);
      ComputationScheduler computationScheduler0 = new ComputationScheduler(rxThreadFactory0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        computationScheduler0.schedulePeriodicallyDirect((Runnable) null, 1296, 1317L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComputationScheduler computationScheduler0 = new ComputationScheduler();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      MockThread mockThread0 = new MockThread("ueb8!{Ks=");
      computationScheduler0.shutdown();
      // Undeclared exception!
      try { 
        computationScheduler0.scheduleDirect((Runnable) mockThread0, 15L, timeUnit0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComputationScheduler.FixedSchedulerPool computationScheduler_FixedSchedulerPool0 = ComputationScheduler.NONE;
      ComputationScheduler.PoolWorker computationScheduler_PoolWorker0 = computationScheduler_FixedSchedulerPool0.getEventLoop();
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("", 0, false);
      ComputationScheduler computationScheduler0 = new ComputationScheduler(rxThreadFactory0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ArrayDeque<DisposableHelper> arrayDeque0 = new ArrayDeque<DisposableHelper>();
      ListCompositeDisposable listCompositeDisposable0 = new ListCompositeDisposable(arrayDeque0);
      listCompositeDisposable0.dispose();
      ScheduledRunnable scheduledRunnable0 = computationScheduler_PoolWorker0.scheduleActual(mockThread0, 0, timeUnit0, listCompositeDisposable0);
      // Undeclared exception!
      try { 
        computationScheduler0.scheduleDirect((Runnable) scheduledRunnable0, (-1877L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComputationScheduler computationScheduler0 = null;
      try {
        computationScheduler0 = new ComputationScheduler((ThreadFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = ComputationScheduler.THREAD_FACTORY;
      ComputationScheduler.FixedSchedulerPool computationScheduler_FixedSchedulerPool0 = new ComputationScheduler.FixedSchedulerPool(1170, rxThreadFactory0);
      computationScheduler_FixedSchedulerPool0.shutdown();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComputationScheduler computationScheduler0 = new ComputationScheduler();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      MockThread mockThread0 = new MockThread("ueb8!{Ks=");
      Disposable disposable0 = computationScheduler0.scheduleDirect((Runnable) mockThread0, 0L, timeUnit0);
      assertNotNull(disposable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("~sR\"|$mSBiC9-RF@");
      FutureTask<Void> futureTask0 = InstantPeriodicTask.CANCELLED;
      Thread thread0 = rxThreadFactory0.newThread(futureTask0);
      ComputationScheduler.FixedSchedulerPool computationScheduler_FixedSchedulerPool0 = new ComputationScheduler.FixedSchedulerPool(0, rxThreadFactory0);
      ComputationScheduler.PoolWorker computationScheduler_PoolWorker0 = computationScheduler_FixedSchedulerPool0.getEventLoop();
      ComputationScheduler.EventLoopWorker computationScheduler_EventLoopWorker0 = new ComputationScheduler.EventLoopWorker(computationScheduler_PoolWorker0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        computationScheduler_EventLoopWorker0.schedule((Runnable) thread0, 0L, timeUnit0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = ComputationScheduler.THREAD_FACTORY;
      ComputationScheduler.FixedSchedulerPool computationScheduler_FixedSchedulerPool0 = new ComputationScheduler.FixedSchedulerPool(503, rxThreadFactory0);
      ComputationScheduler.PoolWorker computationScheduler_PoolWorker0 = computationScheduler_FixedSchedulerPool0.getEventLoop();
      ComputationScheduler.EventLoopWorker computationScheduler_EventLoopWorker0 = new ComputationScheduler.EventLoopWorker(computationScheduler_PoolWorker0);
      ExecutorScheduler.ExecutorWorker executorScheduler_ExecutorWorker0 = new ExecutorScheduler.ExecutorWorker((Executor) null);
      Thread thread0 = rxThreadFactory0.newThread(executorScheduler_ExecutorWorker0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      computationScheduler_EventLoopWorker0.schedule((Runnable) thread0, (long) 503, timeUnit0);
      assertEquals((byte)2, rxThreadFactory0.byteValue());
      assertEquals(2L, rxThreadFactory0.get());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("2FFB)0sOkQ[$HYc~@", 5);
      ComputationScheduler.PoolWorker computationScheduler_PoolWorker0 = new ComputationScheduler.PoolWorker(rxThreadFactory0);
      ComputationScheduler.EventLoopWorker computationScheduler_EventLoopWorker0 = new ComputationScheduler.EventLoopWorker(computationScheduler_PoolWorker0);
      MockThread mockThread0 = new MockThread();
      computationScheduler_EventLoopWorker0.schedule((Runnable) mockThread0);
      assertEquals((byte)1, rxThreadFactory0.byteValue());
      assertEquals(1L, rxThreadFactory0.get());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComputationScheduler computationScheduler0 = new ComputationScheduler();
      computationScheduler0.start();
      assertEquals(900000000000L, computationScheduler0.clockDriftTolerance());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComputationScheduler computationScheduler0 = new ComputationScheduler();
      computationScheduler0.shutdown();
      computationScheduler0.shutdown();
      assertEquals(900000000000L, computationScheduler0.clockDriftTolerance());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComputationScheduler.FixedSchedulerPool computationScheduler_FixedSchedulerPool0 = new ComputationScheduler.FixedSchedulerPool(0, (ThreadFactory) null);
      ComputationScheduler.PoolWorker computationScheduler_PoolWorker0 = computationScheduler_FixedSchedulerPool0.getEventLoop();
      ComputationScheduler.EventLoopWorker computationScheduler_EventLoopWorker0 = new ComputationScheduler.EventLoopWorker(computationScheduler_PoolWorker0);
      computationScheduler_EventLoopWorker0.dispose();
      computationScheduler_EventLoopWorker0.dispose();
      assertTrue(computationScheduler_EventLoopWorker0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = ComputationScheduler.cap(348, 348);
      assertEquals(348, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = ComputationScheduler.cap((-39), 0);
      assertEquals((-39), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("");
      ComputationScheduler computationScheduler0 = new ComputationScheduler(rxThreadFactory0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      IoScheduler.CachedWorkerPool ioScheduler_CachedWorkerPool0 = new IoScheduler.CachedWorkerPool(3027L, timeUnit0, rxThreadFactory0);
      Disposable disposable0 = computationScheduler0.schedulePeriodicallyDirect(ioScheduler_CachedWorkerPool0, 262L, 262L, timeUnit0);
      assertNotNull(disposable0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComputationScheduler computationScheduler0 = new ComputationScheduler();
      Scheduler.Worker scheduler_Worker0 = computationScheduler0.createWorker();
      assertFalse(scheduler_Worker0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComputationScheduler.PoolWorker computationScheduler_PoolWorker0 = ComputationScheduler.SHUTDOWN_WORKER;
      ComputationScheduler.EventLoopWorker computationScheduler_EventLoopWorker0 = new ComputationScheduler.EventLoopWorker(computationScheduler_PoolWorker0);
      boolean boolean0 = computationScheduler_EventLoopWorker0.isDisposed();
      assertFalse(boolean0);
  }
}
