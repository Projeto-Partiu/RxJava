/**
 * Copyright (c) 2016-present, RxJava Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 03 14:51:27 GMT 2017
 */

package io.reactivex.internal.schedulers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableOnSubscribe;
import io.reactivex.Flowable;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Function;
import io.reactivex.internal.schedulers.SchedulerWhen;
import io.reactivex.observers.TestObserver;
import io.reactivex.processors.FlowableProcessor;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SchedulerWhen_ESTest extends SchedulerWhen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      CompletableOnSubscribe completableOnSubscribe0 = mock(CompletableOnSubscribe.class, new ViolatedAssumptionAnswer());
      Completable completable0 = Completable.create(completableOnSubscribe0);
      assertNotNull(completable0);
      
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(completable0).when(function0).apply(any(io.reactivex.Flowable.class));
      Scheduler.Worker scheduler_Worker0 = mock(Scheduler.Worker.class, new ViolatedAssumptionAnswer());
      Scheduler scheduler0 = mock(Scheduler.class, new ViolatedAssumptionAnswer());
      doReturn(scheduler_Worker0).when(scheduler0).createWorker();
      SchedulerWhen schedulerWhen0 = new SchedulerWhen(function0, scheduler0);
      assertNotNull(schedulerWhen0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      
      Scheduler.Worker scheduler_Worker1 = schedulerWhen0.createWorker();
      assertNotNull(scheduler_Worker1);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker1.isDisposed());
      
      SchedulerWhen.QueueWorker schedulerWhen_QueueWorker0 = new SchedulerWhen.QueueWorker(flowableProcessor0, scheduler_Worker1);
      assertNotNull(schedulerWhen_QueueWorker0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker1.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker1));
      
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction(schedulerWhen_QueueWorker0);
      assertNotNull(schedulerWhen_CreateWorkerFunction0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker1.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(scheduler_Worker1.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker1));
      
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      SchedulerWhen.DelayedAction schedulerWhen_DelayedAction0 = new SchedulerWhen.DelayedAction(runnable0, (-2890L), timeUnit0);
      assertNotNull(schedulerWhen_DelayedAction0);
      
      SchedulerWhen.CreateWorkerFunction.WorkerCompletable schedulerWhen_CreateWorkerFunction_WorkerCompletable0 = schedulerWhen_CreateWorkerFunction0.new WorkerCompletable(schedulerWhen_DelayedAction0);
      assertNotNull(schedulerWhen_CreateWorkerFunction_WorkerCompletable0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker1.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(scheduler_Worker1.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker1));
      
      TestObserver<Void> testObserver0 = schedulerWhen_CreateWorkerFunction_WorkerCompletable0.test();
      assertNotNull(testObserver0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker1.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(testObserver0.isDisposed());
      assertEquals(0, testObserver0.valueCount());
      assertFalse(testObserver0.isCancelled());
      assertEquals(0L, testObserver0.completions());
      assertTrue(testObserver0.hasSubscription());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(testObserver0.isTimeout());
      assertFalse(scheduler_Worker1.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker1));
      assertNotSame(scheduler_Worker1, schedulerWhen_QueueWorker0);
      assertNotSame(schedulerWhen_QueueWorker0, scheduler_Worker1);
      
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction0 = new SchedulerWhen.OnCompletedAction(runnable0, testObserver0);
      assertNotNull(schedulerWhen_OnCompletedAction0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker1.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(testObserver0.isDisposed());
      assertEquals(0, testObserver0.valueCount());
      assertFalse(testObserver0.isCancelled());
      assertEquals(0L, testObserver0.completions());
      assertTrue(testObserver0.hasSubscription());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(testObserver0.isTimeout());
      assertFalse(scheduler_Worker1.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker1));
      
      SchedulerWhen.ImmediateAction schedulerWhen_ImmediateAction0 = new SchedulerWhen.ImmediateAction(schedulerWhen_OnCompletedAction0);
      assertNotNull(schedulerWhen_ImmediateAction0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker1.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(testObserver0.isDisposed());
      assertEquals(0, testObserver0.valueCount());
      assertFalse(testObserver0.isCancelled());
      assertEquals(0L, testObserver0.completions());
      assertTrue(testObserver0.hasSubscription());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(testObserver0.isTimeout());
      assertFalse(scheduler_Worker1.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker1));
      
      Completable completable1 = schedulerWhen_CreateWorkerFunction0.apply((SchedulerWhen.ScheduledAction) schedulerWhen_ImmediateAction0);
      assertNotNull(completable1);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker1.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(testObserver0.isDisposed());
      assertEquals(0, testObserver0.valueCount());
      assertFalse(testObserver0.isCancelled());
      assertEquals(0L, testObserver0.completions());
      assertTrue(testObserver0.hasSubscription());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(testObserver0.isTimeout());
      assertFalse(completable1.equals((Object)schedulerWhen_CreateWorkerFunction_WorkerCompletable0));
      assertFalse(scheduler_Worker1.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker1));
      assertNotSame(completable1, schedulerWhen_CreateWorkerFunction_WorkerCompletable0);
      assertNotSame(scheduler_Worker1, schedulerWhen_QueueWorker0);
      assertNotSame(schedulerWhen_QueueWorker0, scheduler_Worker1);
      assertNotSame(schedulerWhen_CreateWorkerFunction_WorkerCompletable0, completable1);
      
      Disposable disposable0 = schedulerWhen_DelayedAction0.callActual(scheduler_Worker1, testObserver0);
      assertNotNull(disposable0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker1.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(testObserver0.isDisposed());
      assertEquals(0, testObserver0.valueCount());
      assertFalse(testObserver0.isCancelled());
      assertEquals(0L, testObserver0.completions());
      assertTrue(testObserver0.hasSubscription());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(testObserver0.isTimeout());
      assertFalse(disposable0.equals((Object)schedulerWhen_DelayedAction0));
      assertFalse(scheduler_Worker1.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker1));
      assertFalse(schedulerWhen_CreateWorkerFunction_WorkerCompletable0.equals((Object)completable1));
      assertNotSame(disposable0, schedulerWhen_DelayedAction0);
      assertNotSame(scheduler_Worker1, schedulerWhen_QueueWorker0);
      assertNotSame(schedulerWhen_QueueWorker0, scheduler_Worker1);
      assertNotSame(schedulerWhen_DelayedAction0, disposable0);
      assertNotSame(schedulerWhen_CreateWorkerFunction_WorkerCompletable0, completable1);
      
      schedulerWhen_QueueWorker0.dispose();
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertTrue(scheduler_Worker1.isDisposed());
      assertTrue(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(scheduler_Worker1.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker1));
      assertNotSame(scheduler_Worker1, schedulerWhen_QueueWorker0);
      assertNotSame(schedulerWhen_QueueWorker0, scheduler_Worker1);
      
      schedulerWhen_DelayedAction0.dispose();
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertFalse(schedulerWhen_DelayedAction0.equals((Object)disposable0));
      assertNotSame(schedulerWhen_DelayedAction0, disposable0);
      
      Disposable disposable1 = schedulerWhen_DelayedAction0.callActual(schedulerWhen_QueueWorker0, testObserver0);
      assertNotNull(disposable1);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertTrue(scheduler_Worker1.isDisposed());
      assertTrue(schedulerWhen_QueueWorker0.isDisposed());
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertFalse(testObserver0.isDisposed());
      assertEquals(0, testObserver0.valueCount());
      assertFalse(testObserver0.isCancelled());
      assertEquals(0L, testObserver0.completions());
      assertTrue(testObserver0.hasSubscription());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(testObserver0.isTimeout());
      assertFalse(disposable1.equals((Object)schedulerWhen_DelayedAction0));
      assertFalse(disposable1.equals((Object)disposable0));
      assertFalse(scheduler_Worker1.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker1));
      assertFalse(schedulerWhen_DelayedAction0.equals((Object)disposable0));
      assertFalse(schedulerWhen_CreateWorkerFunction_WorkerCompletable0.equals((Object)completable1));
      assertNotSame(disposable1, schedulerWhen_DelayedAction0);
      assertNotSame(disposable1, disposable0);
      assertNotSame(scheduler_Worker1, schedulerWhen_QueueWorker0);
      assertNotSame(schedulerWhen_QueueWorker0, scheduler_Worker1);
      assertNotSame(schedulerWhen_DelayedAction0, disposable1);
      assertNotSame(schedulerWhen_DelayedAction0, disposable0);
      assertNotSame(schedulerWhen_CreateWorkerFunction_WorkerCompletable0, completable1);
      
      ((SchedulerWhen.QueueWorker) scheduler_Worker1).dispose();
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertTrue(scheduler_Worker1.isDisposed());
      assertFalse(scheduler_Worker1.equals((Object)schedulerWhen_QueueWorker0));
      assertNotSame(scheduler_Worker1, schedulerWhen_QueueWorker0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SchedulerWhen.ImmediateAction schedulerWhen_ImmediateAction0 = new SchedulerWhen.ImmediateAction((Runnable) null);
      assertNotNull(schedulerWhen_ImmediateAction0);
      
      Completable completable0 = Completable.never();
      assertNotNull(completable0);
      
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(completable0).when(function0).apply(any(io.reactivex.Flowable.class));
      Scheduler scheduler0 = mock(Scheduler.class, new ViolatedAssumptionAnswer());
      doReturn((Scheduler.Worker) null).when(scheduler0).createWorker();
      SchedulerWhen schedulerWhen0 = new SchedulerWhen(function0, scheduler0);
      assertNotNull(schedulerWhen0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      
      Scheduler.Worker scheduler_Worker0 = schedulerWhen0.createWorker();
      assertNotNull(scheduler_Worker0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker0.isDisposed());
      
      schedulerWhen0.dispose();
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction((Scheduler.Worker) null);
      assertNotNull(schedulerWhen_CreateWorkerFunction0);
      
      SchedulerWhen.ImmediateAction schedulerWhen_ImmediateAction1 = new SchedulerWhen.ImmediateAction((Runnable) null);
      assertNotNull(schedulerWhen_ImmediateAction1);
      assertFalse(schedulerWhen_ImmediateAction1.equals((Object)schedulerWhen_ImmediateAction0));
      
      SchedulerWhen.CreateWorkerFunction.WorkerCompletable schedulerWhen_CreateWorkerFunction_WorkerCompletable0 = schedulerWhen_CreateWorkerFunction0.new WorkerCompletable(schedulerWhen_ImmediateAction1);
      assertNotNull(schedulerWhen_CreateWorkerFunction_WorkerCompletable0);
      assertFalse(schedulerWhen_ImmediateAction1.equals((Object)schedulerWhen_ImmediateAction0));
      
      TestObserver<Void> testObserver0 = schedulerWhen_CreateWorkerFunction_WorkerCompletable0.test(true);
      assertNotNull(testObserver0);
      assertEquals("INSTANCE", schedulerWhen_ImmediateAction1.toString());
      assertEquals(0, testObserver0.valueCount());
      assertEquals(0L, testObserver0.completions());
      assertFalse(testObserver0.isTimeout());
      assertTrue(testObserver0.isDisposed());
      assertEquals(0, testObserver0.errorCount());
      assertTrue(testObserver0.isCancelled());
      assertTrue(testObserver0.hasSubscription());
      assertFalse(schedulerWhen_ImmediateAction1.equals((Object)schedulerWhen_ImmediateAction0));
      assertNotSame(schedulerWhen_ImmediateAction1, schedulerWhen_ImmediateAction0);
      
      Disposable disposable0 = schedulerWhen_ImmediateAction0.callActual(scheduler_Worker0, testObserver0);
      assertNotNull(disposable0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker0.isDisposed());
      assertEquals("INSTANCE", schedulerWhen_ImmediateAction1.toString());
      assertEquals(0, testObserver0.valueCount());
      assertEquals(0L, testObserver0.completions());
      assertFalse(testObserver0.isTimeout());
      assertTrue(testObserver0.isDisposed());
      assertEquals(0, testObserver0.errorCount());
      assertTrue(testObserver0.isCancelled());
      assertTrue(testObserver0.hasSubscription());
      assertFalse(schedulerWhen_ImmediateAction0.equals((Object)schedulerWhen_ImmediateAction1));
      assertFalse(schedulerWhen_ImmediateAction1.equals((Object)schedulerWhen_ImmediateAction0));
      assertFalse(disposable0.equals((Object)schedulerWhen_ImmediateAction0));
      assertFalse(disposable0.equals((Object)schedulerWhen_ImmediateAction1));
      assertNotSame(schedulerWhen_ImmediateAction0, schedulerWhen_ImmediateAction1);
      assertNotSame(schedulerWhen_ImmediateAction0, disposable0);
      assertNotSame(schedulerWhen_ImmediateAction1, schedulerWhen_ImmediateAction0);
      assertNotSame(schedulerWhen_ImmediateAction1, disposable0);
      assertNotSame(disposable0, schedulerWhen_ImmediateAction0);
      assertNotSame(disposable0, schedulerWhen_ImmediateAction1);
      
      boolean boolean0 = schedulerWhen0.isDisposed();
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      Future<Object> future0 = (Future<Object>) mock(Future.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(future0).get();
      Completable completable0 = Completable.fromFuture(future0);
      assertNotNull(completable0);
      
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(completable0).when(function0).apply(any(io.reactivex.Flowable.class));
      Scheduler scheduler0 = mock(Scheduler.class, new ViolatedAssumptionAnswer());
      doReturn((Scheduler.Worker) null).when(scheduler0).createWorker();
      SchedulerWhen schedulerWhen0 = new SchedulerWhen(function0, scheduler0);
      assertNotNull(schedulerWhen0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      
      Scheduler.Worker scheduler_Worker0 = schedulerWhen0.createWorker();
      assertNotNull(scheduler_Worker0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker0.isDisposed());
      
      SchedulerWhen.QueueWorker schedulerWhen_QueueWorker0 = new SchedulerWhen.QueueWorker(flowableProcessor0, scheduler_Worker0);
      assertNotNull(schedulerWhen_QueueWorker0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker0.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker0));
      
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction(schedulerWhen_QueueWorker0);
      assertNotNull(schedulerWhen_CreateWorkerFunction0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker0.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(scheduler_Worker0.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker0));
      
      SchedulerWhen.ImmediateAction schedulerWhen_ImmediateAction0 = new SchedulerWhen.ImmediateAction(runnable0);
      assertNotNull(schedulerWhen_ImmediateAction0);
      
      SchedulerWhen.CreateWorkerFunction.WorkerCompletable schedulerWhen_CreateWorkerFunction_WorkerCompletable0 = schedulerWhen_CreateWorkerFunction0.new WorkerCompletable(schedulerWhen_ImmediateAction0);
      assertNotNull(schedulerWhen_CreateWorkerFunction_WorkerCompletable0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker0.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(scheduler_Worker0.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker0));
      
      TestObserver<Void> testObserver0 = schedulerWhen_CreateWorkerFunction_WorkerCompletable0.test();
      assertNotNull(testObserver0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker0.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertTrue(testObserver0.hasSubscription());
      assertEquals(0L, testObserver0.completions());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(testObserver0.isTimeout());
      assertFalse(testObserver0.isDisposed());
      assertEquals(0, testObserver0.valueCount());
      assertFalse(testObserver0.isCancelled());
      assertFalse(scheduler_Worker0.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker0));
      assertNotSame(scheduler_Worker0, schedulerWhen_QueueWorker0);
      assertNotSame(schedulerWhen_QueueWorker0, scheduler_Worker0);
      
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction0 = new SchedulerWhen.OnCompletedAction(runnable0, testObserver0);
      assertNotNull(schedulerWhen_OnCompletedAction0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker0.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertTrue(testObserver0.hasSubscription());
      assertEquals(0L, testObserver0.completions());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(testObserver0.isTimeout());
      assertFalse(testObserver0.isDisposed());
      assertEquals(0, testObserver0.valueCount());
      assertFalse(testObserver0.isCancelled());
      assertFalse(scheduler_Worker0.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker0));
      
      Disposable disposable0 = schedulerWhen_QueueWorker0.schedule((Runnable) schedulerWhen_OnCompletedAction0);
      assertNotNull(disposable0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(scheduler_Worker0.isDisposed());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertTrue(testObserver0.hasSubscription());
      assertEquals(0L, testObserver0.completions());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(testObserver0.isTimeout());
      assertFalse(testObserver0.isDisposed());
      assertEquals(0, testObserver0.valueCount());
      assertFalse(testObserver0.isCancelled());
      assertFalse(scheduler_Worker0.equals((Object)schedulerWhen_QueueWorker0));
      assertFalse(schedulerWhen_QueueWorker0.equals((Object)scheduler_Worker0));
      assertFalse(disposable0.equals((Object)schedulerWhen_ImmediateAction0));
      assertNotSame(scheduler_Worker0, schedulerWhen_QueueWorker0);
      assertNotSame(schedulerWhen_QueueWorker0, scheduler_Worker0);
      assertNotSame(schedulerWhen_ImmediateAction0, disposable0);
      assertNotSame(disposable0, schedulerWhen_ImmediateAction0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.QueueWorker schedulerWhen_QueueWorker0 = new SchedulerWhen.QueueWorker(flowableProcessor0, (Scheduler.Worker) null);
      assertNotNull(schedulerWhen_QueueWorker0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction(schedulerWhen_QueueWorker0);
      assertNotNull(schedulerWhen_CreateWorkerFunction0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction0 = new SchedulerWhen.OnCompletedAction(runnable0, (CompletableObserver) null);
      assertNotNull(schedulerWhen_OnCompletedAction0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      SchedulerWhen.DelayedAction schedulerWhen_DelayedAction0 = new SchedulerWhen.DelayedAction(schedulerWhen_OnCompletedAction0, (-1L), timeUnit0);
      assertNotNull(schedulerWhen_DelayedAction0);
      
      Completable completable0 = schedulerWhen_CreateWorkerFunction0.apply((SchedulerWhen.ScheduledAction) schedulerWhen_DelayedAction0);
      assertNotNull(completable0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      boolean boolean0 = schedulerWhen_DelayedAction0.isDisposed();
      assertFalse(boolean0);
      
      Disposable disposable0 = schedulerWhen_DelayedAction0.callActual(schedulerWhen_QueueWorker0, (CompletableObserver) null);
      assertNotNull(disposable0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(disposable0.equals((Object)schedulerWhen_DelayedAction0));
      assertNotSame(schedulerWhen_DelayedAction0, disposable0);
      assertNotSame(disposable0, schedulerWhen_DelayedAction0);
      
      SchedulerWhen.CreateWorkerFunction.WorkerCompletable schedulerWhen_CreateWorkerFunction_WorkerCompletable0 = schedulerWhen_CreateWorkerFunction0.new WorkerCompletable(schedulerWhen_DelayedAction0);
      assertNotNull(schedulerWhen_CreateWorkerFunction_WorkerCompletable0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(schedulerWhen_DelayedAction0.equals((Object)disposable0));
      assertFalse(schedulerWhen_CreateWorkerFunction_WorkerCompletable0.equals((Object)completable0));
      
      SchedulerWhen.ImmediateAction schedulerWhen_ImmediateAction0 = new SchedulerWhen.ImmediateAction(schedulerWhen_OnCompletedAction0);
      assertNotNull(schedulerWhen_ImmediateAction0);
      
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction1 = new SchedulerWhen.OnCompletedAction(schedulerWhen_OnCompletedAction0, (CompletableObserver) null);
      assertNotNull(schedulerWhen_OnCompletedAction1);
      assertFalse(schedulerWhen_OnCompletedAction1.equals((Object)schedulerWhen_OnCompletedAction0));
      
      SchedulerWhen.SubscribedDisposable schedulerWhen_SubscribedDisposable0 = new SchedulerWhen.SubscribedDisposable();
      assertNotNull(schedulerWhen_SubscribedDisposable0);
      assertFalse(schedulerWhen_SubscribedDisposable0.isDisposed());
      
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerWhen_CreateWorkerFunction_WorkerCompletable0).when(function0).apply(any(io.reactivex.Flowable.class));
      SchedulerWhen schedulerWhen0 = new SchedulerWhen(function0, (Scheduler) null);
      assertNotNull(schedulerWhen0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(schedulerWhen_OnCompletedAction0.equals((Object)schedulerWhen_OnCompletedAction1));
      assertFalse(schedulerWhen_DelayedAction0.equals((Object)disposable0));
      assertFalse(schedulerWhen_CreateWorkerFunction_WorkerCompletable0.equals((Object)completable0));
      
      boolean boolean1 = schedulerWhen0.isDisposed();
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(schedulerWhen_OnCompletedAction0.equals((Object)schedulerWhen_OnCompletedAction1));
      assertFalse(schedulerWhen_DelayedAction0.equals((Object)disposable0));
      assertFalse(schedulerWhen_CreateWorkerFunction_WorkerCompletable0.equals((Object)completable0));
      assertNotSame(schedulerWhen_OnCompletedAction0, schedulerWhen_OnCompletedAction1);
      assertNotSame(schedulerWhen_DelayedAction0, disposable0);
      assertNotSame(schedulerWhen_CreateWorkerFunction_WorkerCompletable0, completable0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompletableOnSubscribe completableOnSubscribe0 = mock(CompletableOnSubscribe.class, new ViolatedAssumptionAnswer());
      Completable completable0 = Completable.create(completableOnSubscribe0);
      assertNotNull(completable0);
      
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(completable0, completable0).when(function0).apply(any(io.reactivex.Flowable.class));
      SchedulerWhen schedulerWhen0 = new SchedulerWhen(function0, (Scheduler) null);
      assertNotNull(schedulerWhen0);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      
      SchedulerWhen schedulerWhen1 = new SchedulerWhen(function0, schedulerWhen0);
      assertNotNull(schedulerWhen1);
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertEquals(900000000000L, schedulerWhen1.clockDriftTolerance());
      assertFalse(schedulerWhen1.equals((Object)schedulerWhen0));
      
      boolean boolean0 = schedulerWhen0.isDisposed();
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      assertFalse(boolean0);
      assertFalse(schedulerWhen0.equals((Object)schedulerWhen1));
      assertNotSame(schedulerWhen0, schedulerWhen1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.QueueWorker schedulerWhen_QueueWorker0 = new SchedulerWhen.QueueWorker((FlowableProcessor<SchedulerWhen.ScheduledAction>) null, (Scheduler.Worker) null);
      assertNotNull(schedulerWhen_QueueWorker0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction(schedulerWhen_QueueWorker0);
      assertNotNull(schedulerWhen_CreateWorkerFunction0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      SchedulerWhen.DelayedAction schedulerWhen_DelayedAction0 = new SchedulerWhen.DelayedAction(runnable0, 2147483636L, timeUnit0);
      assertNotNull(schedulerWhen_DelayedAction0);
      
      SchedulerWhen.CreateWorkerFunction.WorkerCompletable schedulerWhen_CreateWorkerFunction_WorkerCompletable0 = schedulerWhen_CreateWorkerFunction0.new WorkerCompletable(schedulerWhen_DelayedAction0);
      assertNotNull(schedulerWhen_CreateWorkerFunction_WorkerCompletable0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      schedulerWhen_DelayedAction0.dispose();
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      
      TestObserver<Void> testObserver0 = schedulerWhen_CreateWorkerFunction_WorkerCompletable0.test(true);
      assertNotNull(testObserver0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertEquals(0, testObserver0.valueCount());
      assertEquals(0, testObserver0.errorCount());
      assertTrue(testObserver0.isDisposed());
      assertFalse(testObserver0.isTimeout());
      assertEquals(0L, testObserver0.completions());
      assertTrue(testObserver0.hasSubscription());
      assertTrue(testObserver0.isCancelled());
      
      TestObserver testObserver1 = (TestObserver)schedulerWhen_CreateWorkerFunction_WorkerCompletable0.subscribeWith((CompletableObserver) testObserver0);
      assertNotNull(testObserver1);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertEquals(0, testObserver0.valueCount());
      assertEquals(0, testObserver0.errorCount());
      assertTrue(testObserver0.isDisposed());
      assertFalse(testObserver0.isTimeout());
      assertEquals(0L, testObserver0.completions());
      assertTrue(testObserver0.hasSubscription());
      assertTrue(testObserver0.isCancelled());
      assertTrue(testObserver1.isCancelled());
      assertEquals(0, testObserver1.valueCount());
      assertFalse(testObserver1.isTimeout());
      assertTrue(testObserver1.isDisposed());
      assertEquals(0, testObserver1.errorCount());
      assertEquals(0L, testObserver1.completions());
      assertTrue(testObserver1.hasSubscription());
      
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction0 = new SchedulerWhen.OnCompletedAction(runnable0, testObserver1);
      assertNotNull(schedulerWhen_OnCompletedAction0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertEquals(0, testObserver0.valueCount());
      assertEquals(0, testObserver0.errorCount());
      assertTrue(testObserver0.isDisposed());
      assertFalse(testObserver0.isTimeout());
      assertEquals(0L, testObserver0.completions());
      assertTrue(testObserver0.hasSubscription());
      assertTrue(testObserver0.isCancelled());
      assertTrue(testObserver1.isCancelled());
      assertEquals(0, testObserver1.valueCount());
      assertFalse(testObserver1.isTimeout());
      assertTrue(testObserver1.isDisposed());
      assertEquals(0, testObserver1.errorCount());
      assertEquals(0L, testObserver1.completions());
      assertTrue(testObserver1.hasSubscription());
      
      SchedulerWhen.ImmediateAction schedulerWhen_ImmediateAction0 = new SchedulerWhen.ImmediateAction(schedulerWhen_OnCompletedAction0);
      assertNotNull(schedulerWhen_ImmediateAction0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertEquals(0, testObserver0.valueCount());
      assertEquals(0, testObserver0.errorCount());
      assertTrue(testObserver0.isDisposed());
      assertFalse(testObserver0.isTimeout());
      assertEquals(0L, testObserver0.completions());
      assertTrue(testObserver0.hasSubscription());
      assertTrue(testObserver0.isCancelled());
      assertTrue(testObserver1.isCancelled());
      assertEquals(0, testObserver1.valueCount());
      assertFalse(testObserver1.isTimeout());
      assertTrue(testObserver1.isDisposed());
      assertEquals(0, testObserver1.errorCount());
      assertEquals(0L, testObserver1.completions());
      assertTrue(testObserver1.hasSubscription());
      
      TestObserver<Void> testObserver2 = schedulerWhen_CreateWorkerFunction_WorkerCompletable0.test(true);
      assertNotNull(testObserver2);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertEquals(0, testObserver2.errorCount());
      assertTrue(testObserver2.isDisposed());
      assertEquals(0, testObserver2.valueCount());
      assertFalse(testObserver2.isTimeout());
      assertTrue(testObserver2.isCancelled());
      assertEquals(0L, testObserver2.completions());
      assertTrue(testObserver2.hasSubscription());
      assertFalse(testObserver2.equals((Object)testObserver0));
      assertNotSame(testObserver2, testObserver0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction((Scheduler.Worker) null);
      assertNotNull(schedulerWhen_CreateWorkerFunction0);
      
      SchedulerWhen.ImmediateAction schedulerWhen_ImmediateAction0 = new SchedulerWhen.ImmediateAction(runnable0);
      assertNotNull(schedulerWhen_ImmediateAction0);
      
      SchedulerWhen.CreateWorkerFunction.WorkerCompletable schedulerWhen_CreateWorkerFunction_WorkerCompletable0 = schedulerWhen_CreateWorkerFunction0.new WorkerCompletable(schedulerWhen_ImmediateAction0);
      assertNotNull(schedulerWhen_CreateWorkerFunction_WorkerCompletable0);
      
      TestObserver<Void> testObserver0 = schedulerWhen_CreateWorkerFunction_WorkerCompletable0.test(true);
      assertNotNull(testObserver0);
      assertEquals("INSTANCE", schedulerWhen_ImmediateAction0.toString());
      assertTrue(testObserver0.hasSubscription());
      assertTrue(testObserver0.isCancelled());
      assertFalse(testObserver0.isTimeout());
      assertEquals(0, testObserver0.valueCount());
      assertTrue(testObserver0.isDisposed());
      assertEquals(0, testObserver0.errorCount());
      assertEquals(0L, testObserver0.completions());
      
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction0 = new SchedulerWhen.OnCompletedAction(runnable0, testObserver0);
      assertNotNull(schedulerWhen_OnCompletedAction0);
      assertEquals("INSTANCE", schedulerWhen_ImmediateAction0.toString());
      assertTrue(testObserver0.hasSubscription());
      assertTrue(testObserver0.isCancelled());
      assertFalse(testObserver0.isTimeout());
      assertEquals(0, testObserver0.valueCount());
      assertTrue(testObserver0.isDisposed());
      assertEquals(0, testObserver0.errorCount());
      assertEquals(0L, testObserver0.completions());
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      SchedulerWhen.DelayedAction schedulerWhen_DelayedAction0 = new SchedulerWhen.DelayedAction(schedulerWhen_OnCompletedAction0, 0L, timeUnit0);
      assertNotNull(schedulerWhen_DelayedAction0);
      assertEquals("INSTANCE", schedulerWhen_ImmediateAction0.toString());
      assertTrue(testObserver0.hasSubscription());
      assertTrue(testObserver0.isCancelled());
      assertFalse(testObserver0.isTimeout());
      assertEquals(0, testObserver0.valueCount());
      assertTrue(testObserver0.isDisposed());
      assertEquals(0, testObserver0.errorCount());
      assertEquals(0L, testObserver0.completions());
      
      // Undeclared exception!
      try { 
        schedulerWhen_DelayedAction0.callActual((Scheduler.Worker) null, testObserver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.reactivex.internal.schedulers.SchedulerWhen$DelayedAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction((Scheduler.Worker) null);
      assertNotNull(schedulerWhen_CreateWorkerFunction0);
      
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.QueueWorker schedulerWhen_QueueWorker0 = new SchedulerWhen.QueueWorker(flowableProcessor0, (Scheduler.Worker) null);
      assertNotNull(schedulerWhen_QueueWorker0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      SchedulerWhen.SubscribedDisposable schedulerWhen_SubscribedDisposable0 = (SchedulerWhen.SubscribedDisposable)SchedulerWhen.SUBSCRIBED;
      assertNotNull(schedulerWhen_SubscribedDisposable0);
      assertFalse(schedulerWhen_SubscribedDisposable0.isDisposed());
      
      schedulerWhen_SubscribedDisposable0.dispose();
      assertFalse(schedulerWhen_SubscribedDisposable0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      SchedulerWhen.DelayedAction schedulerWhen_DelayedAction0 = new SchedulerWhen.DelayedAction((Runnable) null, (-1L), timeUnit0);
      assertNotNull(schedulerWhen_DelayedAction0);
      
      schedulerWhen_DelayedAction0.dispose();
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      
      boolean boolean0 = schedulerWhen_DelayedAction0.isDisposed();
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SchedulerWhen.SubscribedDisposable schedulerWhen_SubscribedDisposable0 = (SchedulerWhen.SubscribedDisposable)SchedulerWhen.SUBSCRIBED;
      assertNotNull(schedulerWhen_SubscribedDisposable0);
      assertFalse(schedulerWhen_SubscribedDisposable0.isDisposed());
      
      boolean boolean0 = schedulerWhen_SubscribedDisposable0.isDisposed();
      assertFalse(schedulerWhen_SubscribedDisposable0.isDisposed());
      assertFalse(boolean0);
      
      Iterable<Completable> iterable0 = (Iterable<Completable>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      Completable completable0 = Completable.merge(iterable0);
      assertNotNull(completable0);
      
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor1 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.QueueWorker schedulerWhen_QueueWorker0 = new SchedulerWhen.QueueWorker(flowableProcessor1, (Scheduler.Worker) null);
      assertNotNull(schedulerWhen_QueueWorker0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction(schedulerWhen_QueueWorker0);
      assertNotNull(schedulerWhen_CreateWorkerFunction0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction0 = new SchedulerWhen.OnCompletedAction(runnable0, (CompletableObserver) null);
      assertNotNull(schedulerWhen_OnCompletedAction0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      SchedulerWhen.DelayedAction schedulerWhen_DelayedAction0 = new SchedulerWhen.DelayedAction(schedulerWhen_OnCompletedAction0, (-1708L), timeUnit0);
      assertNotNull(schedulerWhen_DelayedAction0);
      
      SchedulerWhen.CreateWorkerFunction.WorkerCompletable schedulerWhen_CreateWorkerFunction_WorkerCompletable0 = schedulerWhen_CreateWorkerFunction0.new WorkerCompletable(schedulerWhen_DelayedAction0);
      assertNotNull(schedulerWhen_CreateWorkerFunction_WorkerCompletable0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerWhen_CreateWorkerFunction_WorkerCompletable0).when(function0).apply(any(io.reactivex.Flowable.class));
      SchedulerWhen schedulerWhen0 = new SchedulerWhen(function0, (Scheduler) null);
      assertNotNull(schedulerWhen0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      
      // Undeclared exception!
      try { 
        schedulerWhen0.createWorker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.reactivex.internal.schedulers.SchedulerWhen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction((Scheduler.Worker) null);
      assertNotNull(schedulerWhen_CreateWorkerFunction0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      SchedulerWhen.DelayedAction schedulerWhen_DelayedAction0 = new SchedulerWhen.DelayedAction(runnable0, 0L, timeUnit0);
      assertNotNull(schedulerWhen_DelayedAction0);
      
      SchedulerWhen.CreateWorkerFunction.WorkerCompletable schedulerWhen_CreateWorkerFunction_WorkerCompletable0 = schedulerWhen_CreateWorkerFunction0.new WorkerCompletable(schedulerWhen_DelayedAction0);
      assertNotNull(schedulerWhen_CreateWorkerFunction_WorkerCompletable0);
      
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Disposable> unaryOperator0 = (UnaryOperator<Disposable>) mock(UnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(unaryOperator0).apply(any(io.reactivex.disposables.Disposable.class));
      SchedulerWhen.SubscribedDisposable schedulerWhen_SubscribedDisposable0 = (SchedulerWhen.SubscribedDisposable)schedulerWhen_DelayedAction0.getAndUpdate(unaryOperator0);
      assertNotNull(schedulerWhen_SubscribedDisposable0);
      assertEquals("null", schedulerWhen_DelayedAction0.toString());
      assertFalse(schedulerWhen_SubscribedDisposable0.isDisposed());
      
      SchedulerWhen.QueueWorker schedulerWhen_QueueWorker0 = new SchedulerWhen.QueueWorker(flowableProcessor0, (Scheduler.Worker) null);
      assertNotNull(schedulerWhen_QueueWorker0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      TestObserver<Void> testObserver0 = schedulerWhen_CreateWorkerFunction_WorkerCompletable0.test();
      assertNotNull(testObserver0);
      assertEquals("null", schedulerWhen_DelayedAction0.toString());
      assertEquals(0L, testObserver0.completions());
      assertFalse(testObserver0.isTimeout());
      assertTrue(testObserver0.hasSubscription());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(testObserver0.isDisposed());
      assertFalse(testObserver0.isCancelled());
      assertEquals(0, testObserver0.valueCount());
      
      schedulerWhen_DelayedAction0.call(schedulerWhen_QueueWorker0, testObserver0);
      assertEquals("null", schedulerWhen_DelayedAction0.toString());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertEquals(0L, testObserver0.completions());
      assertFalse(testObserver0.isTimeout());
      assertTrue(testObserver0.hasSubscription());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(testObserver0.isDisposed());
      assertFalse(testObserver0.isCancelled());
      assertEquals(0, testObserver0.valueCount());
      
      TestObserver<Void> testObserver1 = schedulerWhen_CreateWorkerFunction_WorkerCompletable0.test(false);
      assertNotNull(testObserver1);
      assertEquals("null", schedulerWhen_DelayedAction0.toString());
      assertEquals(0, testObserver1.errorCount());
      assertFalse(testObserver1.isCancelled());
      assertFalse(testObserver1.isTimeout());
      assertEquals(0L, testObserver1.completions());
      assertFalse(testObserver1.isDisposed());
      assertTrue(testObserver1.hasSubscription());
      assertEquals(0, testObserver1.valueCount());
      assertFalse(testObserver1.equals((Object)testObserver0));
      assertNotSame(testObserver1, testObserver0);
      
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction0 = new SchedulerWhen.OnCompletedAction(runnable0, testObserver1);
      assertNotNull(schedulerWhen_OnCompletedAction0);
      assertEquals("null", schedulerWhen_DelayedAction0.toString());
      assertEquals(0, testObserver1.errorCount());
      assertFalse(testObserver1.isCancelled());
      assertFalse(testObserver1.isTimeout());
      assertEquals(0L, testObserver1.completions());
      assertFalse(testObserver1.isDisposed());
      assertTrue(testObserver1.hasSubscription());
      assertEquals(0, testObserver1.valueCount());
      assertFalse(testObserver1.equals((Object)testObserver0));
      
      schedulerWhen_OnCompletedAction0.run();
      assertEquals("null", schedulerWhen_DelayedAction0.toString());
      assertEquals(0, testObserver1.errorCount());
      assertEquals(1L, testObserver1.completions());
      assertFalse(testObserver1.isCancelled());
      assertFalse(testObserver1.isTimeout());
      assertFalse(testObserver1.isDisposed());
      assertTrue(testObserver1.hasSubscription());
      assertEquals(0, testObserver1.valueCount());
      assertFalse(testObserver1.equals((Object)testObserver0));
      assertNotSame(testObserver1, testObserver0);
      
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction1 = new SchedulerWhen.OnCompletedAction(schedulerWhen_OnCompletedAction0, testObserver1);
      assertNotNull(schedulerWhen_OnCompletedAction1);
      assertEquals("null", schedulerWhen_DelayedAction0.toString());
      assertEquals(0, testObserver1.errorCount());
      assertEquals(1L, testObserver1.completions());
      assertFalse(testObserver1.isCancelled());
      assertFalse(testObserver1.isTimeout());
      assertFalse(testObserver1.isDisposed());
      assertTrue(testObserver1.hasSubscription());
      assertEquals(0, testObserver1.valueCount());
      assertFalse(testObserver1.equals((Object)testObserver0));
      assertFalse(schedulerWhen_OnCompletedAction1.equals((Object)schedulerWhen_OnCompletedAction0));
      
      // Undeclared exception!
      try { 
        schedulerWhen_DelayedAction0.dispose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SchedulerWhen.SubscribedDisposable schedulerWhen_SubscribedDisposable0 = new SchedulerWhen.SubscribedDisposable();
      assertNotNull(schedulerWhen_SubscribedDisposable0);
      assertFalse(schedulerWhen_SubscribedDisposable0.isDisposed());
      
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction((Scheduler.Worker) null);
      assertNotNull(schedulerWhen_CreateWorkerFunction0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      SchedulerWhen.DelayedAction schedulerWhen_DelayedAction0 = new SchedulerWhen.DelayedAction(runnable0, (-131L), timeUnit0);
      assertNotNull(schedulerWhen_DelayedAction0);
      
      SchedulerWhen.CreateWorkerFunction.WorkerCompletable schedulerWhen_CreateWorkerFunction_WorkerCompletable0 = schedulerWhen_CreateWorkerFunction0.new WorkerCompletable(schedulerWhen_DelayedAction0);
      assertNotNull(schedulerWhen_CreateWorkerFunction_WorkerCompletable0);
      
      TestObserver<Void> testObserver0 = schedulerWhen_CreateWorkerFunction_WorkerCompletable0.test(true);
      assertNotNull(testObserver0);
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertTrue(testObserver0.hasSubscription());
      assertTrue(testObserver0.isCancelled());
      assertFalse(testObserver0.isTimeout());
      assertEquals(0, testObserver0.valueCount());
      assertTrue(testObserver0.isDisposed());
      assertEquals(0L, testObserver0.completions());
      assertEquals(0, testObserver0.errorCount());
      
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction0 = new SchedulerWhen.OnCompletedAction(runnable0, testObserver0);
      assertNotNull(schedulerWhen_OnCompletedAction0);
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertTrue(testObserver0.hasSubscription());
      assertTrue(testObserver0.isCancelled());
      assertFalse(testObserver0.isTimeout());
      assertEquals(0, testObserver0.valueCount());
      assertTrue(testObserver0.isDisposed());
      assertEquals(0L, testObserver0.completions());
      assertEquals(0, testObserver0.errorCount());
      
      SchedulerWhen.ImmediateAction schedulerWhen_ImmediateAction0 = new SchedulerWhen.ImmediateAction(schedulerWhen_OnCompletedAction0);
      assertNotNull(schedulerWhen_ImmediateAction0);
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertTrue(testObserver0.hasSubscription());
      assertTrue(testObserver0.isCancelled());
      assertFalse(testObserver0.isTimeout());
      assertEquals(0, testObserver0.valueCount());
      assertTrue(testObserver0.isDisposed());
      assertEquals(0L, testObserver0.completions());
      assertEquals(0, testObserver0.errorCount());
      
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.QueueWorker schedulerWhen_QueueWorker0 = new SchedulerWhen.QueueWorker(flowableProcessor0, (Scheduler.Worker) null);
      assertNotNull(schedulerWhen_QueueWorker0);
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      
      Disposable disposable0 = schedulerWhen_ImmediateAction0.callActual(schedulerWhen_QueueWorker0, testObserver0);
      assertNotNull(disposable0);
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertTrue(testObserver0.hasSubscription());
      assertTrue(testObserver0.isCancelled());
      assertFalse(testObserver0.isTimeout());
      assertEquals(0, testObserver0.valueCount());
      assertTrue(testObserver0.isDisposed());
      assertEquals(0L, testObserver0.completions());
      assertEquals(0, testObserver0.errorCount());
      assertFalse(schedulerWhen_QueueWorker0.isDisposed());
      assertFalse(disposable0.equals((Object)schedulerWhen_ImmediateAction0));
      assertNotSame(schedulerWhen_ImmediateAction0, disposable0);
      assertNotSame(disposable0, schedulerWhen_ImmediateAction0);
      
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerWhen_CreateWorkerFunction_WorkerCompletable0).when(function0).apply(any(io.reactivex.Flowable.class));
      Scheduler scheduler0 = mock(Scheduler.class, new ViolatedAssumptionAnswer());
      SchedulerWhen schedulerWhen0 = new SchedulerWhen(function0, scheduler0);
      assertNotNull(schedulerWhen0);
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
      
      schedulerWhen0.dispose();
      assertEquals("INSTANCE", schedulerWhen_DelayedAction0.toString());
      assertEquals(900000000000L, schedulerWhen0.clockDriftTolerance());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(io.reactivex.Flowable.class));
      Scheduler scheduler0 = mock(Scheduler.class, new ViolatedAssumptionAnswer());
      SchedulerWhen schedulerWhen0 = null;
      try {
        schedulerWhen0 = new SchedulerWhen(function0, scheduler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.reactivex.internal.schedulers.SchedulerWhen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(io.reactivex.Flowable.class));
      Scheduler scheduler0 = mock(Scheduler.class, new ViolatedAssumptionAnswer());
      SchedulerWhen schedulerWhen0 = null;
      try {
        schedulerWhen0 = new SchedulerWhen(function0, scheduler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.reactivex.internal.schedulers.SchedulerWhen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      CompletableOnSubscribe completableOnSubscribe0 = mock(CompletableOnSubscribe.class, new ViolatedAssumptionAnswer());
      Completable completable0 = Completable.create(completableOnSubscribe0);
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(completable0).when(function0).apply(any(io.reactivex.Flowable.class));
      Scheduler.Worker scheduler_Worker0 = mock(Scheduler.Worker.class, new ViolatedAssumptionAnswer());
      Scheduler scheduler0 = mock(Scheduler.class, new ViolatedAssumptionAnswer());
      doReturn(scheduler_Worker0).when(scheduler0).createWorker();
      SchedulerWhen schedulerWhen0 = new SchedulerWhen(function0, scheduler0);
      Scheduler.Worker scheduler_Worker1 = schedulerWhen0.createWorker();
      SchedulerWhen.QueueWorker schedulerWhen_QueueWorker0 = new SchedulerWhen.QueueWorker(flowableProcessor0, scheduler_Worker1);
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction(schedulerWhen_QueueWorker0);
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      SchedulerWhen.DelayedAction schedulerWhen_DelayedAction0 = new SchedulerWhen.DelayedAction(runnable0, (-2890L), timeUnit0);
      SchedulerWhen.CreateWorkerFunction.WorkerCompletable schedulerWhen_CreateWorkerFunction_WorkerCompletable0 = schedulerWhen_CreateWorkerFunction0.new WorkerCompletable(schedulerWhen_DelayedAction0);
      TestObserver<Void> testObserver0 = schedulerWhen_CreateWorkerFunction_WorkerCompletable0.test();
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction0 = new SchedulerWhen.OnCompletedAction(runnable0, testObserver0);
      SchedulerWhen.ImmediateAction schedulerWhen_ImmediateAction0 = new SchedulerWhen.ImmediateAction(schedulerWhen_OnCompletedAction0);
      schedulerWhen_CreateWorkerFunction0.apply((SchedulerWhen.ScheduledAction) schedulerWhen_ImmediateAction0);
      schedulerWhen_DelayedAction0.callActual(scheduler_Worker1, testObserver0);
      schedulerWhen_QueueWorker0.dispose();
      schedulerWhen_DelayedAction0.dispose();
      schedulerWhen_DelayedAction0.callActual(schedulerWhen_QueueWorker0, testObserver0);
      assertTrue(schedulerWhen_QueueWorker0.isDisposed());
      assertTrue(scheduler_Worker1.isDisposed());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Flowable<Flowable<Completable>>, Completable> function1 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any(io.reactivex.Flowable.class));
      Scheduler scheduler0 = mock(Scheduler.class, new ViolatedAssumptionAnswer());
      SchedulerWhen schedulerWhen0 = null;
      try {
        schedulerWhen0 = new SchedulerWhen(function1, scheduler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.reactivex.internal.schedulers.SchedulerWhen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SchedulerWhen.SubscribedDisposable schedulerWhen_SubscribedDisposable0 = new SchedulerWhen.SubscribedDisposable();
      Function<Flowable<Flowable<Completable>>, Completable> function0 = (Function<Flowable<Flowable<Completable>>, Completable>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(io.reactivex.Flowable.class));
      SchedulerWhen schedulerWhen0 = null;
      try {
        schedulerWhen0 = new SchedulerWhen(function0, (Scheduler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.reactivex.internal.schedulers.SchedulerWhen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor1 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      Runnable runnable1 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.ImmediateAction schedulerWhen_ImmediateAction0 = new SchedulerWhen.ImmediateAction(runnable1);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      SchedulerWhen.DelayedAction schedulerWhen_DelayedAction0 = new SchedulerWhen.DelayedAction(runnable0, (-417L), timeUnit0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FlowableProcessor<SchedulerWhen.ScheduledAction> flowableProcessor0 = (FlowableProcessor<SchedulerWhen.ScheduledAction>) mock(FlowableProcessor.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.QueueWorker schedulerWhen_QueueWorker0 = new SchedulerWhen.QueueWorker(flowableProcessor0, (Scheduler.Worker) null);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction0 = new SchedulerWhen.CreateWorkerFunction(schedulerWhen_QueueWorker0);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      SchedulerWhen.DelayedAction schedulerWhen_DelayedAction0 = new SchedulerWhen.DelayedAction(runnable0, (-1L), timeUnit1);
      SchedulerWhen.CreateWorkerFunction.WorkerCompletable schedulerWhen_CreateWorkerFunction_WorkerCompletable0 = schedulerWhen_CreateWorkerFunction0.new WorkerCompletable(schedulerWhen_DelayedAction0);
      TestObserver<Void> testObserver0 = schedulerWhen_CreateWorkerFunction_WorkerCompletable0.test(true);
      SchedulerWhen.OnCompletedAction schedulerWhen_OnCompletedAction0 = new SchedulerWhen.OnCompletedAction(runnable0, testObserver0);
      TimeUnit timeUnit2 = TimeUnit.SECONDS;
      schedulerWhen_QueueWorker0.schedulePeriodically(schedulerWhen_OnCompletedAction0, 1L, (-1788L), timeUnit2);
      schedulerWhen_QueueWorker0.schedule((Runnable) null, 0L, timeUnit0);
      schedulerWhen_QueueWorker0.now(timeUnit0);
      schedulerWhen_QueueWorker0.isDisposed();
      SchedulerWhen.CreateWorkerFunction schedulerWhen_CreateWorkerFunction1 = new SchedulerWhen.CreateWorkerFunction(schedulerWhen_QueueWorker0);
      assertFalse(schedulerWhen_CreateWorkerFunction1.equals((Object)schedulerWhen_CreateWorkerFunction0));
  }
}
