/**
 * Copyright (c) 2016-present, RxJava Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 03 13:31:23 GMT 2017
 */

package io.reactivex.internal.schedulers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.reactivex.functions.Consumer;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.schedulers.AbstractDirectTask;
import io.reactivex.internal.schedulers.ExecutorScheduler;
import io.reactivex.internal.schedulers.RxThreadFactory;
import io.reactivex.internal.schedulers.SingleScheduler;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingleScheduler_ESTest extends SingleScheduler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = (ScheduledThreadPoolExecutor)SingleScheduler.SHUTDOWN;
      SingleScheduler.ScheduledWorker singleScheduler_ScheduledWorker0 = new SingleScheduler.ScheduledWorker(scheduledThreadPoolExecutor0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        singleScheduler_ScheduledWorker0.schedule((Runnable) null, (-1933L), timeUnit0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = SingleScheduler.SINGLE_THREAD_FACTORY;
      SingleScheduler singleScheduler0 = new SingleScheduler(rxThreadFactory0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      SingleScheduler.createExecutor(rxThreadFactory0);
      singleScheduler0.schedulePeriodicallyDirect(thread0, (-1328L), 5000L, timeUnit0);
      singleScheduler0.schedulePeriodicallyDirect(thread0, 1392409281320000L, 1392409281320000L, timeUnit0);
      //  // Unstable assertion: assertEquals(115, rxThreadFactory0.intValue());
      //  // Unstable assertion: assertEquals(115L, rxThreadFactory0.longValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Callable<DisposableHelper> callable0 = (Callable<DisposableHelper>) mock(Callable.class, new ViolatedAssumptionAnswer());
      FutureTask<DisposableHelper> futureTask0 = new FutureTask<DisposableHelper>(callable0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      SingleScheduler singleScheduler0 = new SingleScheduler();
      singleScheduler0.start();
      singleScheduler0.schedulePeriodicallyDirect(futureTask0, 42L, 0L, timeUnit0);
      singleScheduler0.shutdown();
      assertEquals(900000000000L, singleScheduler0.clockDriftTolerance());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SingleScheduler singleScheduler0 = new SingleScheduler();
      singleScheduler0.start();
      singleScheduler0.shutdown();
      int int0 = 0;
      ThreadGroup threadGroup0 = new ThreadGroup("Array of size 2 expected but got ");
      MockThread mockThread0 = new MockThread(threadGroup0, "Array of size 2 expected but got ");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        singleScheduler0.schedulePeriodicallyDirect(mockThread0, 0L, 0L, timeUnit0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = SingleScheduler.SINGLE_THREAD_FACTORY;
      SingleScheduler singleScheduler0 = new SingleScheduler(rxThreadFactory0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      singleScheduler0.scheduleDirect((Runnable) thread0, 0L, timeUnit0);
      singleScheduler0.shutdown();
      // Undeclared exception!
      try { 
        singleScheduler0.scheduleDirect((Runnable) thread0, 2188L, timeUnit0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardOldestPolicy0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThreadGroup threadGroup0 = new ThreadGroup("^-s6WE~*qM<");
      ExecutorScheduler.ExecutorWorker executorScheduler_ExecutorWorker0 = new ExecutorScheduler.ExecutorWorker(scheduledThreadPoolExecutor0);
      MockThread mockThread0 = new MockThread(threadGroup0, executorScheduler_ExecutorWorker0, "^-s6WE~*qM<", 0);
      SingleScheduler singleScheduler0 = new SingleScheduler();
      singleScheduler0.shutdown();
      // Undeclared exception!
      try { 
        singleScheduler0.schedulePeriodicallyDirect(mockThread0, (-1776L), 3215L, timeUnit0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("", (-1357));
      SingleScheduler singleScheduler0 = new SingleScheduler(rxThreadFactory0);
      MockThread mockThread0 = new MockThread((Runnable) null, "");
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        singleScheduler0.schedulePeriodicallyDirect(mockThread0, 1L, 0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory(";A>~^W.eOEJW", 10, true);
      SingleScheduler singleScheduler0 = new SingleScheduler(rxThreadFactory0);
      singleScheduler0.shutdown();
      Callable<DisposableHelper> callable0 = (Callable<DisposableHelper>) mock(Callable.class, new ViolatedAssumptionAnswer());
      FutureTask<DisposableHelper> futureTask0 = new FutureTask<DisposableHelper>(callable0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        singleScheduler0.scheduleDirect((Runnable) futureTask0, (-9223372036854775808L), timeUnit0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FutureTask<Void> futureTask0 = AbstractDirectTask.DISPOSED;
      long long0 = 60L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      String string0 = null;
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory(string0);
      SingleScheduler singleScheduler0 = new SingleScheduler(rxThreadFactory0);
      // Undeclared exception!
      try { 
        singleScheduler0.scheduleDirect((Runnable) futureTask0, long0, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("", 0, false);
      SingleScheduler singleScheduler0 = new SingleScheduler(rxThreadFactory0);
      MockThread mockThread0 = new MockThread("");
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        singleScheduler0.scheduleDirect((Runnable) mockThread0, 0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreadFactory threadFactory0 = null;
      // Undeclared exception!
      try { 
        SingleScheduler.createExecutor(threadFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SingleScheduler singleScheduler0 = null;
      try {
        singleScheduler0 = new SingleScheduler((ThreadFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = SingleScheduler.SINGLE_THREAD_FACTORY;
      SingleScheduler singleScheduler0 = new SingleScheduler(rxThreadFactory0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      singleScheduler0.schedulePeriodicallyDirect(thread0, (-1L), (-1L), timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = SingleScheduler.SINGLE_THREAD_FACTORY;
      SingleScheduler singleScheduler0 = new SingleScheduler(rxThreadFactory0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      singleScheduler0.schedulePeriodicallyDirect(thread0, 5000L, 5000L, timeUnit0);
      ScheduledExecutorService scheduledExecutorService0 = SingleScheduler.createExecutor(rxThreadFactory0);
      singleScheduler0.scheduleDirect((Runnable) thread0, 0L, timeUnit0);
      SingleScheduler.ScheduledWorker singleScheduler_ScheduledWorker0 = new SingleScheduler.ScheduledWorker(scheduledExecutorService0);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singleScheduler_ScheduledWorker0.schedule((Runnable) thread0, 2188L, timeUnit0);
      singleScheduler0.schedulePeriodicallyDirect(thread0, (-1328L), 5000L, timeUnit0);
      assertEquals(2, rxThreadFactory0.intValue());
      assertEquals(2L, rxThreadFactory0.get());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = SingleScheduler.SINGLE_THREAD_FACTORY;
      ScheduledExecutorService scheduledExecutorService0 = SingleScheduler.createExecutor(rxThreadFactory0);
      SingleScheduler.ScheduledWorker singleScheduler_ScheduledWorker0 = new SingleScheduler.ScheduledWorker(scheduledExecutorService0);
      SingleScheduler.createExecutor(rxThreadFactory0);
      singleScheduler_ScheduledWorker0.dispose();
      singleScheduler_ScheduledWorker0.dispose();
      assertTrue(singleScheduler_ScheduledWorker0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_AbortPolicy0);
      SingleScheduler.ScheduledWorker singleScheduler_ScheduledWorker0 = new SingleScheduler.ScheduledWorker(scheduledThreadPoolExecutor0);
      ThreadGroup threadGroup0 = new ThreadGroup("Array of size 2 expected but got ");
      MockThread mockThread0 = new MockThread(threadGroup0, "Array of size 2 expected but got ");
      singleScheduler_ScheduledWorker0.dispose();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      singleScheduler_ScheduledWorker0.schedule((Runnable) mockThread0, (-1872L), timeUnit0);
      assertTrue(singleScheduler_ScheduledWorker0.isDisposed());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardOldestPolicy0);
      SingleScheduler.ScheduledWorker singleScheduler_ScheduledWorker0 = new SingleScheduler.ScheduledWorker(scheduledThreadPoolExecutor0);
      Callable<DisposableHelper> callable0 = (Callable<DisposableHelper>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      FutureTask<DisposableHelper> futureTask0 = new FutureTask<DisposableHelper>(callable0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      singleScheduler_ScheduledWorker0.schedulePeriodically(futureTask0, 0, 0, timeUnit0);
      SingleScheduler.ScheduledWorker singleScheduler_ScheduledWorker1 = new SingleScheduler.ScheduledWorker(scheduledThreadPoolExecutor0);
      assertFalse(singleScheduler_ScheduledWorker1.isDisposed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      SingleScheduler singleScheduler0 = new SingleScheduler();
      singleScheduler0.shutdown();
      singleScheduler0.start();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = (ScheduledThreadPoolExecutor)SingleScheduler.SHUTDOWN;
      SingleScheduler.ScheduledWorker singleScheduler_ScheduledWorker0 = new SingleScheduler.ScheduledWorker(scheduledThreadPoolExecutor0);
      boolean boolean0 = singleScheduler_ScheduledWorker0.isDisposed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("", (-1357));
      SingleScheduler singleScheduler0 = new SingleScheduler(rxThreadFactory0);
      RxJavaPlugins.setErrorHandler((Consumer<? super Throwable>) null);
      singleScheduler0.createWorker();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SingleScheduler singleScheduler0 = new SingleScheduler();
      singleScheduler0.start();
      singleScheduler0.shutdown();
      singleScheduler0.shutdown();
      assertEquals(900000000000L, singleScheduler0.clockDriftTolerance());
  }
}
