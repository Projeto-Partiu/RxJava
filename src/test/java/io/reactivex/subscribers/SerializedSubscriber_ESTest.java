/**
 * Copyright (c) 2016-present, RxJava Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 03 12:58:11 GMT 2017
 */

package io.reactivex.subscribers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.reactivex.processors.AsyncProcessor;
import io.reactivex.subscribers.SerializedSubscriber;
import io.reactivex.subscribers.TestSubscriber;
import java.sql.SQLIntegrityConstraintViolationException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SerializedSubscriber_ESTest extends SerializedSubscriber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncProcessor<Object> asyncProcessor0 = AsyncProcessor.create();
      SerializedSubscriber<Integer> serializedSubscriber0 = new SerializedSubscriber<Integer>(asyncProcessor0, true);
      serializedSubscriber0.onComplete();
      assertTrue(asyncProcessor0.hasComplete());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TestSubscriber<Object> testSubscriber0 = TestSubscriber.create();
      SerializedSubscriber<Throwable> serializedSubscriber0 = new SerializedSubscriber<Throwable>(testSubscriber0, false);
      serializedSubscriber0.onComplete();
      serializedSubscriber0.onComplete();
      assertEquals(1, testSubscriber0.errorCount());
      assertEquals(1L, testSubscriber0.completions());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TestSubscriber<Object> testSubscriber0 = TestSubscriber.create();
      SerializedSubscriber<Throwable> serializedSubscriber0 = new SerializedSubscriber<Throwable>(testSubscriber0,
              false);
      serializedSubscriber0.onComplete();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 =
              new SQLIntegrityConstraintViolationException();
      serializedSubscriber0.onError(sQLIntegrityConstraintViolationException0);
      assertEquals(1, testSubscriber0.errorCount());
      assertEquals(1L, testSubscriber0.completions());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TestSubscriber<Object> testSubscriber0 = TestSubscriber.create();
      SerializedSubscriber<Throwable> serializedSubscriber0 = new SerializedSubscriber<Throwable>(testSubscriber0, false);
      SerializedSubscriber<Throwable> serializedSubscriber1 = new SerializedSubscriber<Throwable>(serializedSubscriber0);
      assertFalse(serializedSubscriber1.equals((Object)serializedSubscriber0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncProcessor<Object> asyncProcessor0 = AsyncProcessor.create();
      SerializedSubscriber<Integer> serializedSubscriber0 = new SerializedSubscriber<Integer>(asyncProcessor0, true);
      // Undeclared exception!
      try { 
        serializedSubscriber0.cancel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.reactivex.subscribers.SerializedSubscriber", e);
      }
  }
}
