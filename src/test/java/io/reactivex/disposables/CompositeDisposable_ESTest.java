/**
 * Copyright (c) 2016-present, RxJava Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 03 12:24:50 GMT 2017
 */

package io.reactivex.disposables;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Action;
import io.reactivex.functions.Consumer;
import io.reactivex.internal.util.BlockingIgnoringReceiver;
import io.reactivex.internal.util.OpenHashSet;
import io.reactivex.processors.AsyncProcessor;
import io.reactivex.subscribers.TestSubscriber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.reactivestreams.Subscription;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeDisposable_ESTest extends CompositeDisposable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CompositeDisposable compositeDisposable0 = new CompositeDisposable();
      OpenHashSet<Disposable> openHashSet0 = new OpenHashSet<Disposable>(0, 0);
      compositeDisposable0.dispose(openHashSet0);
      assertEquals(0, openHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CompositeDisposable compositeDisposable0 = new CompositeDisposable();
      Disposable[] disposableArray0 = new Disposable[6];
      disposableArray0[0] = (Disposable) compositeDisposable0;
      TestSubscriber<CompositeDisposable> testSubscriber0 = new TestSubscriber<CompositeDisposable>(251L);
      disposableArray0[1] = (Disposable) testSubscriber0;
      disposableArray0[2] = (Disposable) compositeDisposable0;
      disposableArray0[3] = (Disposable) compositeDisposable0;
      disposableArray0[4] = (Disposable) compositeDisposable0;
      disposableArray0[5] = (Disposable) compositeDisposable0;
      compositeDisposable0.addAll(disposableArray0);
      int int0 = compositeDisposable0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CompositeDisposable compositeDisposable0 = new CompositeDisposable();
      int int0 = compositeDisposable0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Disposable[] disposableArray0 = new Disposable[3];
      TestSubscriber<Integer> testSubscriber0 = TestSubscriber.create(1992L);
      disposableArray0[0] = (Disposable) testSubscriber0;
      AsyncProcessor<Integer> asyncProcessor0 = AsyncProcessor.create();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      BlockingIgnoringReceiver blockingIgnoringReceiver0 = new BlockingIgnoringReceiver();
      Disposable disposable0 = asyncProcessor0.subscribe((Consumer<? super Integer>) consumer0, (Consumer<? super Throwable>) consumer1, (Action) blockingIgnoringReceiver0, (Consumer<? super Subscription>) consumer0);
      disposableArray0[1] = disposable0;
      disposableArray0[2] = disposableArray0[1];
      CompositeDisposable compositeDisposable0 = new CompositeDisposable(disposableArray0);
      assertEquals(2, compositeDisposable0.size());
      
      boolean boolean0 = compositeDisposable0.addAll(disposableArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CompositeDisposable compositeDisposable0 = new CompositeDisposable();
      compositeDisposable0.dispose();
      assertTrue(compositeDisposable0.isDisposed());
  }
}
